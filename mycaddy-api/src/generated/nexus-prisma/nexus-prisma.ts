/**
 * This file was automatically generated by nexus-prisma@0.3.7
 * Do not make changes to this file directly
 */

import { core } from 'nexus'
import { GraphQLResolveInfo } from 'graphql'
import * as prisma from '../prisma-client'

declare global {
  interface NexusPrismaGen extends NexusPrismaTypes {}
}

export interface NexusPrismaTypes {
  objectTypes: {
    fields: {
      Query: QueryObject
      User: UserObject
      UserConnection: UserConnectionObject
      PageInfo: PageInfoObject
      UserEdge: UserEdgeObject
      AggregateUser: AggregateUserObject
      Country: CountryObject
      CountryConnection: CountryConnectionObject
      CountryEdge: CountryEdgeObject
      AggregateCountry: AggregateCountryObject
      Club: ClubObject
      Course: CourseObject
      ClubConnection: ClubConnectionObject
      ClubEdge: ClubEdgeObject
      AggregateClub: AggregateClubObject
      CourseConnection: CourseConnectionObject
      CourseEdge: CourseEdgeObject
      AggregateCourse: AggregateCourseObject
      Hole: HoleObject
      HoleConnection: HoleConnectionObject
      HoleEdge: HoleEdgeObject
      AggregateHole: AggregateHoleObject
      Geodata: GeodataObject
      GeodataConnection: GeodataConnectionObject
      GeodataEdge: GeodataEdgeObject
      AggregateGeodata: AggregateGeodataObject
      Mutation: MutationObject
      BatchPayload: BatchPayloadObject
      Subscription: SubscriptionObject
      UserSubscriptionPayload: UserSubscriptionPayloadObject
      UserPreviousValues: UserPreviousValuesObject
      CountrySubscriptionPayload: CountrySubscriptionPayloadObject
      CountryPreviousValues: CountryPreviousValuesObject
      ClubSubscriptionPayload: ClubSubscriptionPayloadObject
      ClubPreviousValues: ClubPreviousValuesObject
      CourseSubscriptionPayload: CourseSubscriptionPayloadObject
      CoursePreviousValues: CoursePreviousValuesObject
      HoleSubscriptionPayload: HoleSubscriptionPayloadObject
      HolePreviousValues: HolePreviousValuesObject
      GeodataSubscriptionPayload: GeodataSubscriptionPayloadObject
      GeodataPreviousValues: GeodataPreviousValuesObject
    }
    fieldsDetails: {
      Query: QueryFieldDetails
      User: UserFieldDetails
      UserConnection: UserConnectionFieldDetails
      PageInfo: PageInfoFieldDetails
      UserEdge: UserEdgeFieldDetails
      AggregateUser: AggregateUserFieldDetails
      Country: CountryFieldDetails
      CountryConnection: CountryConnectionFieldDetails
      CountryEdge: CountryEdgeFieldDetails
      AggregateCountry: AggregateCountryFieldDetails
      Club: ClubFieldDetails
      Course: CourseFieldDetails
      ClubConnection: ClubConnectionFieldDetails
      ClubEdge: ClubEdgeFieldDetails
      AggregateClub: AggregateClubFieldDetails
      CourseConnection: CourseConnectionFieldDetails
      CourseEdge: CourseEdgeFieldDetails
      AggregateCourse: AggregateCourseFieldDetails
      Hole: HoleFieldDetails
      HoleConnection: HoleConnectionFieldDetails
      HoleEdge: HoleEdgeFieldDetails
      AggregateHole: AggregateHoleFieldDetails
      Geodata: GeodataFieldDetails
      GeodataConnection: GeodataConnectionFieldDetails
      GeodataEdge: GeodataEdgeFieldDetails
      AggregateGeodata: AggregateGeodataFieldDetails
      Mutation: MutationFieldDetails
      BatchPayload: BatchPayloadFieldDetails
      Subscription: SubscriptionFieldDetails
      UserSubscriptionPayload: UserSubscriptionPayloadFieldDetails
      UserPreviousValues: UserPreviousValuesFieldDetails
      CountrySubscriptionPayload: CountrySubscriptionPayloadFieldDetails
      CountryPreviousValues: CountryPreviousValuesFieldDetails
      ClubSubscriptionPayload: ClubSubscriptionPayloadFieldDetails
      ClubPreviousValues: ClubPreviousValuesFieldDetails
      CourseSubscriptionPayload: CourseSubscriptionPayloadFieldDetails
      CoursePreviousValues: CoursePreviousValuesFieldDetails
      HoleSubscriptionPayload: HoleSubscriptionPayloadFieldDetails
      HolePreviousValues: HolePreviousValuesFieldDetails
      GeodataSubscriptionPayload: GeodataSubscriptionPayloadFieldDetails
      GeodataPreviousValues: GeodataPreviousValuesFieldDetails
    }
  }
  inputTypes: {
    fields: {
      UserWhereUniqueInput: UserWhereUniqueInputInputObject
      UserWhereInput: UserWhereInputInputObject
      CountryWhereUniqueInput: CountryWhereUniqueInputInputObject
      CountryWhereInput: CountryWhereInputInputObject
      ClubWhereUniqueInput: ClubWhereUniqueInputInputObject
      CourseWhereInput: CourseWhereInputInputObject
      ClubWhereInput: ClubWhereInputInputObject
      CourseWhereUniqueInput: CourseWhereUniqueInputInputObject
      HoleWhereUniqueInput: HoleWhereUniqueInputInputObject
      HoleWhereInput: HoleWhereInputInputObject
      GeodataWhereUniqueInput: GeodataWhereUniqueInputInputObject
      GeodataWhereInput: GeodataWhereInputInputObject
      UserCreateInput: UserCreateInputInputObject
      UserUpdateInput: UserUpdateInputInputObject
      UserUpdateManyMutationInput: UserUpdateManyMutationInputInputObject
      CountryCreateInput: CountryCreateInputInputObject
      CountryUpdateInput: CountryUpdateInputInputObject
      CountryUpdateManyMutationInput: CountryUpdateManyMutationInputInputObject
      ClubCreateInput: ClubCreateInputInputObject
      CountryCreateOneInput: CountryCreateOneInputInputObject
      CourseCreateManyWithoutClubInput: CourseCreateManyWithoutClubInputInputObject
      CourseCreateWithoutClubInput: CourseCreateWithoutClubInputInputObject
      ClubUpdateInput: ClubUpdateInputInputObject
      CountryUpdateOneInput: CountryUpdateOneInputInputObject
      CountryUpdateDataInput: CountryUpdateDataInputInputObject
      CountryUpsertNestedInput: CountryUpsertNestedInputInputObject
      CourseUpdateManyWithoutClubInput: CourseUpdateManyWithoutClubInputInputObject
      CourseUpdateWithWhereUniqueWithoutClubInput: CourseUpdateWithWhereUniqueWithoutClubInputInputObject
      CourseUpdateWithoutClubDataInput: CourseUpdateWithoutClubDataInputInputObject
      CourseUpsertWithWhereUniqueWithoutClubInput: CourseUpsertWithWhereUniqueWithoutClubInputInputObject
      CourseScalarWhereInput: CourseScalarWhereInputInputObject
      CourseUpdateManyWithWhereNestedInput: CourseUpdateManyWithWhereNestedInputInputObject
      CourseUpdateManyDataInput: CourseUpdateManyDataInputInputObject
      ClubUpdateManyMutationInput: ClubUpdateManyMutationInputInputObject
      CourseCreateInput: CourseCreateInputInputObject
      ClubCreateOneWithoutCourseInput: ClubCreateOneWithoutCourseInputInputObject
      ClubCreateWithoutCourseInput: ClubCreateWithoutCourseInputInputObject
      CourseUpdateInput: CourseUpdateInputInputObject
      ClubUpdateOneRequiredWithoutCourseInput: ClubUpdateOneRequiredWithoutCourseInputInputObject
      ClubUpdateWithoutCourseDataInput: ClubUpdateWithoutCourseDataInputInputObject
      ClubUpsertWithoutCourseInput: ClubUpsertWithoutCourseInputInputObject
      CourseUpdateManyMutationInput: CourseUpdateManyMutationInputInputObject
      HoleCreateInput: HoleCreateInputInputObject
      CourseCreateOneInput: CourseCreateOneInputInputObject
      HoleUpdateInput: HoleUpdateInputInputObject
      CourseUpdateOneInput: CourseUpdateOneInputInputObject
      CourseUpdateDataInput: CourseUpdateDataInputInputObject
      CourseUpsertNestedInput: CourseUpsertNestedInputInputObject
      HoleUpdateManyMutationInput: HoleUpdateManyMutationInputInputObject
      GeodataCreateInput: GeodataCreateInputInputObject
      GeodataUpdateInput: GeodataUpdateInputInputObject
      GeodataUpdateManyMutationInput: GeodataUpdateManyMutationInputInputObject
      UserSubscriptionWhereInput: UserSubscriptionWhereInputInputObject
      CountrySubscriptionWhereInput: CountrySubscriptionWhereInputInputObject
      ClubSubscriptionWhereInput: ClubSubscriptionWhereInputInputObject
      CourseSubscriptionWhereInput: CourseSubscriptionWhereInputInputObject
      HoleSubscriptionWhereInput: HoleSubscriptionWhereInputInputObject
      GeodataSubscriptionWhereInput: GeodataSubscriptionWhereInputInputObject
    }
  }
  enumTypes: {
    UserOrderByInput: UserOrderByInputValues,
    CountryOrderByInput: CountryOrderByInputValues,
    CourseOrderByInput: CourseOrderByInputValues,
    ClubOrderByInput: ClubOrderByInputValues,
    HoleOrderByInput: HoleOrderByInputValues,
    GeodataOrderByInput: GeodataOrderByInputValues,
    MutationType: MutationTypeValues,
  }
}

// Types for Query

type QueryObject =
  | QueryFields
  | { name: 'user', args?: QueryUserArgs[] | false, alias?: string  } 
  | { name: 'users', args?: QueryUsersArgs[] | false, alias?: string  } 
  | { name: 'usersConnection', args?: QueryUsersConnectionArgs[] | false, alias?: string  } 
  | { name: 'country', args?: QueryCountryArgs[] | false, alias?: string  } 
  | { name: 'countries', args?: QueryCountriesArgs[] | false, alias?: string  } 
  | { name: 'countriesConnection', args?: QueryCountriesConnectionArgs[] | false, alias?: string  } 
  | { name: 'club', args?: QueryClubArgs[] | false, alias?: string  } 
  | { name: 'clubs', args?: QueryClubsArgs[] | false, alias?: string  } 
  | { name: 'clubsConnection', args?: QueryClubsConnectionArgs[] | false, alias?: string  } 
  | { name: 'course', args?: QueryCourseArgs[] | false, alias?: string  } 
  | { name: 'courses', args?: QueryCoursesArgs[] | false, alias?: string  } 
  | { name: 'coursesConnection', args?: QueryCoursesConnectionArgs[] | false, alias?: string  } 
  | { name: 'hole', args?: QueryHoleArgs[] | false, alias?: string  } 
  | { name: 'holes', args?: QueryHolesArgs[] | false, alias?: string  } 
  | { name: 'holesConnection', args?: QueryHolesConnectionArgs[] | false, alias?: string  } 
  | { name: 'geodata', args?: QueryGeodataArgs[] | false, alias?: string  } 
  | { name: 'geodatas', args?: QueryGeodatasArgs[] | false, alias?: string  } 
  | { name: 'geodatasConnection', args?: QueryGeodatasConnectionArgs[] | false, alias?: string  } 

type QueryFields =
  | 'user'
  | 'users'
  | 'usersConnection'
  | 'country'
  | 'countries'
  | 'countriesConnection'
  | 'club'
  | 'clubs'
  | 'clubsConnection'
  | 'course'
  | 'courses'
  | 'coursesConnection'
  | 'hole'
  | 'holes'
  | 'holesConnection'
  | 'geodata'
  | 'geodatas'
  | 'geodatasConnection'


type QueryUserArgs =
  | 'where'
type QueryUsersArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryUsersConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryCountryArgs =
  | 'where'
type QueryCountriesArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryCountriesConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryClubArgs =
  | 'where'
type QueryClubsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryClubsConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryCourseArgs =
  | 'where'
type QueryCoursesArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryCoursesConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryHoleArgs =
  | 'where'
type QueryHolesArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryHolesConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryGeodataArgs =
  | 'where'
type QueryGeodatasArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryGeodatasConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
  

export interface QueryFieldDetails {
  user: {
    type: 'User'
    args: Record<QueryUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: UserWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User | null> | prisma.User | null
  }
  users: {
    type: 'User'
    args: Record<QueryUsersArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: UserWhereInput | null, orderBy?: prisma.UserOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User[]> | prisma.User[]
  }
  usersConnection: {
    type: 'UserConnection'
    args: Record<QueryUsersConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: UserWhereInput | null, orderBy?: prisma.UserOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserConnection> | prisma.UserConnection
  }
  country: {
    type: 'Country'
    args: Record<QueryCountryArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: CountryWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Country | null> | prisma.Country | null
  }
  countries: {
    type: 'Country'
    args: Record<QueryCountriesArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: CountryWhereInput | null, orderBy?: prisma.CountryOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Country[]> | prisma.Country[]
  }
  countriesConnection: {
    type: 'CountryConnection'
    args: Record<QueryCountriesConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: CountryWhereInput | null, orderBy?: prisma.CountryOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CountryConnection> | prisma.CountryConnection
  }
  club: {
    type: 'Club'
    args: Record<QueryClubArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: ClubWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Club | null> | prisma.Club | null
  }
  clubs: {
    type: 'Club'
    args: Record<QueryClubsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: ClubWhereInput | null, orderBy?: prisma.ClubOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Club[]> | prisma.Club[]
  }
  clubsConnection: {
    type: 'ClubConnection'
    args: Record<QueryClubsConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: ClubWhereInput | null, orderBy?: prisma.ClubOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ClubConnection> | prisma.ClubConnection
  }
  course: {
    type: 'Course'
    args: Record<QueryCourseArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: CourseWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Course | null> | prisma.Course | null
  }
  courses: {
    type: 'Course'
    args: Record<QueryCoursesArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: CourseWhereInput | null, orderBy?: prisma.CourseOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Course[]> | prisma.Course[]
  }
  coursesConnection: {
    type: 'CourseConnection'
    args: Record<QueryCoursesConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: CourseWhereInput | null, orderBy?: prisma.CourseOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CourseConnection> | prisma.CourseConnection
  }
  hole: {
    type: 'Hole'
    args: Record<QueryHoleArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: HoleWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Hole | null> | prisma.Hole | null
  }
  holes: {
    type: 'Hole'
    args: Record<QueryHolesArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: HoleWhereInput | null, orderBy?: prisma.HoleOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Hole[]> | prisma.Hole[]
  }
  holesConnection: {
    type: 'HoleConnection'
    args: Record<QueryHolesConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: HoleWhereInput | null, orderBy?: prisma.HoleOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.HoleConnection> | prisma.HoleConnection
  }
  geodata: {
    type: 'Geodata'
    args: Record<QueryGeodataArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: GeodataWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Geodata | null> | prisma.Geodata | null
  }
  geodatas: {
    type: 'Geodata'
    args: Record<QueryGeodatasArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: GeodataWhereInput | null, orderBy?: prisma.GeodataOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Geodata[]> | prisma.Geodata[]
  }
  geodatasConnection: {
    type: 'GeodataConnection'
    args: Record<QueryGeodatasConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: GeodataWhereInput | null, orderBy?: prisma.GeodataOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.GeodataConnection> | prisma.GeodataConnection
  }
}
  

// Types for User

type UserObject =
  | UserFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'email', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'password', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 

type UserFields =
  | 'id'
  | 'email'
  | 'name'
  | 'password'
  | 'createdAt'
  | 'updatedAt'



  

export interface UserFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  email: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  password: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for UserConnection

type UserConnectionObject =
  | UserConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type UserConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface UserConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"UserConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'UserEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"UserConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserEdge[]> | prisma.UserEdge[]
  }
  aggregate: {
    type: 'AggregateUser'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"UserConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateUser> | prisma.AggregateUser
  }
}
  

// Types for PageInfo

type PageInfoObject =
  | PageInfoFields
  | { name: 'hasNextPage', args?: [] | false, alias?: string  } 
  | { name: 'hasPreviousPage', args?: [] | false, alias?: string  } 
  | { name: 'startCursor', args?: [] | false, alias?: string  } 
  | { name: 'endCursor', args?: [] | false, alias?: string  } 

type PageInfoFields =
  | 'hasNextPage'
  | 'hasPreviousPage'
  | 'startCursor'
  | 'endCursor'



  

export interface PageInfoFieldDetails {
  hasNextPage: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  hasPreviousPage: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  startCursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  endCursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  

// Types for UserEdge

type UserEdgeObject =
  | UserEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type UserEdgeFields =
  | 'node'
  | 'cursor'



  

export interface UserEdgeFieldDetails {
  node: {
    type: 'User'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"UserEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User> | prisma.User
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateUser

type AggregateUserObject =
  | AggregateUserFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateUserFields =
  | 'count'



  

export interface AggregateUserFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for Country

type CountryObject =
  | CountryFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'id_number', args?: [] | false, alias?: string  } 
  | { name: 'iso_numeric', args?: [] | false, alias?: string  } 
  | { name: 'iso_alpha_2', args?: [] | false, alias?: string  } 
  | { name: 'iso_alpha_3', args?: [] | false, alias?: string  } 
  | { name: 'name_en', args?: [] | false, alias?: string  } 
  | { name: 'name_kr', args?: [] | false, alias?: string  } 
  | { name: 'dial_number', args?: [] | false, alias?: string  } 

type CountryFields =
  | 'id'
  | 'id_number'
  | 'iso_numeric'
  | 'iso_alpha_2'
  | 'iso_alpha_3'
  | 'name_en'
  | 'name_kr'
  | 'dial_number'



  

export interface CountryFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  id_number: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  iso_numeric: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  iso_alpha_2: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  iso_alpha_3: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  name_en: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name_kr: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  dial_number: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  

// Types for CountryConnection

type CountryConnectionObject =
  | CountryConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type CountryConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface CountryConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"CountryConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'CountryEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"CountryConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CountryEdge[]> | prisma.CountryEdge[]
  }
  aggregate: {
    type: 'AggregateCountry'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"CountryConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateCountry> | prisma.AggregateCountry
  }
}
  

// Types for CountryEdge

type CountryEdgeObject =
  | CountryEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type CountryEdgeFields =
  | 'node'
  | 'cursor'



  

export interface CountryEdgeFieldDetails {
  node: {
    type: 'Country'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"CountryEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Country> | prisma.Country
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateCountry

type AggregateCountryObject =
  | AggregateCountryFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateCountryFields =
  | 'count'



  

export interface AggregateCountryFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for Club

type ClubObject =
  | ClubFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'id_number', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'name_origin', args?: [] | false, alias?: string  } 
  | { name: 'sw_lat', args?: [] | false, alias?: string  } 
  | { name: 'sw_lng', args?: [] | false, alias?: string  } 
  | { name: 'ne_lat', args?: [] | false, alias?: string  } 
  | { name: 'ne_lng', args?: [] | false, alias?: string  } 
  | { name: 'address1', args?: [] | false, alias?: string  } 
  | { name: 'address2', args?: [] | false, alias?: string  } 
  | { name: 'contry', args?: [] | false, alias?: string  } 
  | { name: 'course', args?: ClubCourseArgs[] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 

type ClubFields =
  | 'id'
  | 'id_number'
  | 'name'
  | 'name_origin'
  | 'sw_lat'
  | 'sw_lng'
  | 'ne_lat'
  | 'ne_lng'
  | 'address1'
  | 'address2'
  | 'contry'
  | 'course'
  | 'createdAt'
  | 'updatedAt'


type ClubCourseArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
  

export interface ClubFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  id_number: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  name_origin: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  sw_lat: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  sw_lng: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  ne_lat: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  ne_lng: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  address1: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  address2: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  contry: {
    type: 'Country'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Club">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Country | null> | prisma.Country | null
  }
  course: {
    type: 'Course'
    args: Record<ClubCourseArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Club">,
      args: { where?: CourseWhereInput | null, orderBy?: prisma.CourseOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Course[]> | prisma.Course[]
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for Course

type CourseObject =
  | CourseFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'club', args?: [] | false, alias?: string  } 
  | { name: 'seq_no', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 

type CourseFields =
  | 'id'
  | 'club'
  | 'seq_no'
  | 'name'
  | 'createdAt'
  | 'updatedAt'



  

export interface CourseFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  club: {
    type: 'Club'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Course">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Club> | prisma.Club
  }
  seq_no: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for ClubConnection

type ClubConnectionObject =
  | ClubConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type ClubConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface ClubConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ClubConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'ClubEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"ClubConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ClubEdge[]> | prisma.ClubEdge[]
  }
  aggregate: {
    type: 'AggregateClub'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ClubConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateClub> | prisma.AggregateClub
  }
}
  

// Types for ClubEdge

type ClubEdgeObject =
  | ClubEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type ClubEdgeFields =
  | 'node'
  | 'cursor'



  

export interface ClubEdgeFieldDetails {
  node: {
    type: 'Club'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ClubEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Club> | prisma.Club
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateClub

type AggregateClubObject =
  | AggregateClubFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateClubFields =
  | 'count'



  

export interface AggregateClubFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for CourseConnection

type CourseConnectionObject =
  | CourseConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type CourseConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface CourseConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"CourseConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'CourseEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"CourseConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CourseEdge[]> | prisma.CourseEdge[]
  }
  aggregate: {
    type: 'AggregateCourse'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"CourseConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateCourse> | prisma.AggregateCourse
  }
}
  

// Types for CourseEdge

type CourseEdgeObject =
  | CourseEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type CourseEdgeFields =
  | 'node'
  | 'cursor'



  

export interface CourseEdgeFieldDetails {
  node: {
    type: 'Course'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"CourseEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Course> | prisma.Course
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateCourse

type AggregateCourseObject =
  | AggregateCourseFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateCourseFields =
  | 'count'



  

export interface AggregateCourseFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for Hole

type HoleObject =
  | HoleFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'seq_no', args?: [] | false, alias?: string  } 
  | { name: 'course', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 

type HoleFields =
  | 'id'
  | 'seq_no'
  | 'course'
  | 'createdAt'
  | 'updatedAt'



  

export interface HoleFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  seq_no: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  course: {
    type: 'Course'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Hole">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Course | null> | prisma.Course | null
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for HoleConnection

type HoleConnectionObject =
  | HoleConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type HoleConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface HoleConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"HoleConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'HoleEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"HoleConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.HoleEdge[]> | prisma.HoleEdge[]
  }
  aggregate: {
    type: 'AggregateHole'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"HoleConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateHole> | prisma.AggregateHole
  }
}
  

// Types for HoleEdge

type HoleEdgeObject =
  | HoleEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type HoleEdgeFields =
  | 'node'
  | 'cursor'



  

export interface HoleEdgeFieldDetails {
  node: {
    type: 'Hole'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"HoleEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Hole> | prisma.Hole
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateHole

type AggregateHoleObject =
  | AggregateHoleFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateHoleFields =
  | 'count'



  

export interface AggregateHoleFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for Geodata

type GeodataObject =
  | GeodataFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'course', args?: [] | false, alias?: string  } 
  | { name: 'lat', args?: [] | false, alias?: string  } 
  | { name: 'lng', args?: [] | false, alias?: string  } 
  | { name: 'alt', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 

type GeodataFields =
  | 'id'
  | 'course'
  | 'lat'
  | 'lng'
  | 'alt'
  | 'createdAt'
  | 'updatedAt'



  

export interface GeodataFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  course: {
    type: 'Course'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Geodata">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Course | null> | prisma.Course | null
  }
  lat: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  lng: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  alt: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for GeodataConnection

type GeodataConnectionObject =
  | GeodataConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type GeodataConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface GeodataConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"GeodataConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'GeodataEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"GeodataConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.GeodataEdge[]> | prisma.GeodataEdge[]
  }
  aggregate: {
    type: 'AggregateGeodata'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"GeodataConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateGeodata> | prisma.AggregateGeodata
  }
}
  

// Types for GeodataEdge

type GeodataEdgeObject =
  | GeodataEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type GeodataEdgeFields =
  | 'node'
  | 'cursor'



  

export interface GeodataEdgeFieldDetails {
  node: {
    type: 'Geodata'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"GeodataEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Geodata> | prisma.Geodata
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateGeodata

type AggregateGeodataObject =
  | AggregateGeodataFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateGeodataFields =
  | 'count'



  

export interface AggregateGeodataFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for Mutation

type MutationObject =
  | MutationFields
  | { name: 'createUser', args?: MutationCreateUserArgs[] | false, alias?: string  } 
  | { name: 'updateUser', args?: MutationUpdateUserArgs[] | false, alias?: string  } 
  | { name: 'updateManyUsers', args?: MutationUpdateManyUsersArgs[] | false, alias?: string  } 
  | { name: 'upsertUser', args?: MutationUpsertUserArgs[] | false, alias?: string  } 
  | { name: 'deleteUser', args?: MutationDeleteUserArgs[] | false, alias?: string  } 
  | { name: 'deleteManyUsers', args?: MutationDeleteManyUsersArgs[] | false, alias?: string  } 
  | { name: 'createCountry', args?: MutationCreateCountryArgs[] | false, alias?: string  } 
  | { name: 'updateCountry', args?: MutationUpdateCountryArgs[] | false, alias?: string  } 
  | { name: 'updateManyCountries', args?: MutationUpdateManyCountriesArgs[] | false, alias?: string  } 
  | { name: 'upsertCountry', args?: MutationUpsertCountryArgs[] | false, alias?: string  } 
  | { name: 'deleteCountry', args?: MutationDeleteCountryArgs[] | false, alias?: string  } 
  | { name: 'deleteManyCountries', args?: MutationDeleteManyCountriesArgs[] | false, alias?: string  } 
  | { name: 'createClub', args?: MutationCreateClubArgs[] | false, alias?: string  } 
  | { name: 'updateClub', args?: MutationUpdateClubArgs[] | false, alias?: string  } 
  | { name: 'updateManyClubs', args?: MutationUpdateManyClubsArgs[] | false, alias?: string  } 
  | { name: 'upsertClub', args?: MutationUpsertClubArgs[] | false, alias?: string  } 
  | { name: 'deleteClub', args?: MutationDeleteClubArgs[] | false, alias?: string  } 
  | { name: 'deleteManyClubs', args?: MutationDeleteManyClubsArgs[] | false, alias?: string  } 
  | { name: 'createCourse', args?: MutationCreateCourseArgs[] | false, alias?: string  } 
  | { name: 'updateCourse', args?: MutationUpdateCourseArgs[] | false, alias?: string  } 
  | { name: 'updateManyCourses', args?: MutationUpdateManyCoursesArgs[] | false, alias?: string  } 
  | { name: 'upsertCourse', args?: MutationUpsertCourseArgs[] | false, alias?: string  } 
  | { name: 'deleteCourse', args?: MutationDeleteCourseArgs[] | false, alias?: string  } 
  | { name: 'deleteManyCourses', args?: MutationDeleteManyCoursesArgs[] | false, alias?: string  } 
  | { name: 'createHole', args?: MutationCreateHoleArgs[] | false, alias?: string  } 
  | { name: 'updateHole', args?: MutationUpdateHoleArgs[] | false, alias?: string  } 
  | { name: 'updateManyHoles', args?: MutationUpdateManyHolesArgs[] | false, alias?: string  } 
  | { name: 'upsertHole', args?: MutationUpsertHoleArgs[] | false, alias?: string  } 
  | { name: 'deleteHole', args?: MutationDeleteHoleArgs[] | false, alias?: string  } 
  | { name: 'deleteManyHoles', args?: MutationDeleteManyHolesArgs[] | false, alias?: string  } 
  | { name: 'createGeodata', args?: MutationCreateGeodataArgs[] | false, alias?: string  } 
  | { name: 'updateGeodata', args?: MutationUpdateGeodataArgs[] | false, alias?: string  } 
  | { name: 'updateManyGeodatas', args?: MutationUpdateManyGeodatasArgs[] | false, alias?: string  } 
  | { name: 'upsertGeodata', args?: MutationUpsertGeodataArgs[] | false, alias?: string  } 
  | { name: 'deleteGeodata', args?: MutationDeleteGeodataArgs[] | false, alias?: string  } 
  | { name: 'deleteManyGeodatas', args?: MutationDeleteManyGeodatasArgs[] | false, alias?: string  } 

type MutationFields =
  | 'createUser'
  | 'updateUser'
  | 'updateManyUsers'
  | 'upsertUser'
  | 'deleteUser'
  | 'deleteManyUsers'
  | 'createCountry'
  | 'updateCountry'
  | 'updateManyCountries'
  | 'upsertCountry'
  | 'deleteCountry'
  | 'deleteManyCountries'
  | 'createClub'
  | 'updateClub'
  | 'updateManyClubs'
  | 'upsertClub'
  | 'deleteClub'
  | 'deleteManyClubs'
  | 'createCourse'
  | 'updateCourse'
  | 'updateManyCourses'
  | 'upsertCourse'
  | 'deleteCourse'
  | 'deleteManyCourses'
  | 'createHole'
  | 'updateHole'
  | 'updateManyHoles'
  | 'upsertHole'
  | 'deleteHole'
  | 'deleteManyHoles'
  | 'createGeodata'
  | 'updateGeodata'
  | 'updateManyGeodatas'
  | 'upsertGeodata'
  | 'deleteGeodata'
  | 'deleteManyGeodatas'


type MutationCreateUserArgs =
  | 'data'
type MutationUpdateUserArgs =
  | 'data'
  | 'where'
type MutationUpdateManyUsersArgs =
  | 'data'
  | 'where'
type MutationUpsertUserArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteUserArgs =
  | 'where'
type MutationDeleteManyUsersArgs =
  | 'where'
type MutationCreateCountryArgs =
  | 'data'
type MutationUpdateCountryArgs =
  | 'data'
  | 'where'
type MutationUpdateManyCountriesArgs =
  | 'data'
  | 'where'
type MutationUpsertCountryArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteCountryArgs =
  | 'where'
type MutationDeleteManyCountriesArgs =
  | 'where'
type MutationCreateClubArgs =
  | 'data'
type MutationUpdateClubArgs =
  | 'data'
  | 'where'
type MutationUpdateManyClubsArgs =
  | 'data'
  | 'where'
type MutationUpsertClubArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteClubArgs =
  | 'where'
type MutationDeleteManyClubsArgs =
  | 'where'
type MutationCreateCourseArgs =
  | 'data'
type MutationUpdateCourseArgs =
  | 'data'
  | 'where'
type MutationUpdateManyCoursesArgs =
  | 'data'
  | 'where'
type MutationUpsertCourseArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteCourseArgs =
  | 'where'
type MutationDeleteManyCoursesArgs =
  | 'where'
type MutationCreateHoleArgs =
  | 'data'
type MutationUpdateHoleArgs =
  | 'data'
  | 'where'
type MutationUpdateManyHolesArgs =
  | 'data'
  | 'where'
type MutationUpsertHoleArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteHoleArgs =
  | 'where'
type MutationDeleteManyHolesArgs =
  | 'where'
type MutationCreateGeodataArgs =
  | 'data'
type MutationUpdateGeodataArgs =
  | 'data'
  | 'where'
type MutationUpdateManyGeodatasArgs =
  | 'data'
  | 'where'
type MutationUpsertGeodataArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteGeodataArgs =
  | 'where'
type MutationDeleteManyGeodatasArgs =
  | 'where'
  

export interface MutationFieldDetails {
  createUser: {
    type: 'User'
    args: Record<MutationCreateUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: UserCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User> | prisma.User
  }
  updateUser: {
    type: 'User'
    args: Record<MutationUpdateUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: UserUpdateInput, where: UserWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User | null> | prisma.User | null
  }
  updateManyUsers: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyUsersArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: UserUpdateManyMutationInput, where?: UserWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertUser: {
    type: 'User'
    args: Record<MutationUpsertUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: UserWhereUniqueInput, create: UserCreateInput, update: UserUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User> | prisma.User
  }
  deleteUser: {
    type: 'User'
    args: Record<MutationDeleteUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: UserWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User | null> | prisma.User | null
  }
  deleteManyUsers: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyUsersArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: UserWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createCountry: {
    type: 'Country'
    args: Record<MutationCreateCountryArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: CountryCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Country> | prisma.Country
  }
  updateCountry: {
    type: 'Country'
    args: Record<MutationUpdateCountryArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: CountryUpdateInput, where: CountryWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Country | null> | prisma.Country | null
  }
  updateManyCountries: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyCountriesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: CountryUpdateManyMutationInput, where?: CountryWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertCountry: {
    type: 'Country'
    args: Record<MutationUpsertCountryArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: CountryWhereUniqueInput, create: CountryCreateInput, update: CountryUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Country> | prisma.Country
  }
  deleteCountry: {
    type: 'Country'
    args: Record<MutationDeleteCountryArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: CountryWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Country | null> | prisma.Country | null
  }
  deleteManyCountries: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyCountriesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: CountryWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createClub: {
    type: 'Club'
    args: Record<MutationCreateClubArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: ClubCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Club> | prisma.Club
  }
  updateClub: {
    type: 'Club'
    args: Record<MutationUpdateClubArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: ClubUpdateInput, where: ClubWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Club | null> | prisma.Club | null
  }
  updateManyClubs: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyClubsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: ClubUpdateManyMutationInput, where?: ClubWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertClub: {
    type: 'Club'
    args: Record<MutationUpsertClubArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: ClubWhereUniqueInput, create: ClubCreateInput, update: ClubUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Club> | prisma.Club
  }
  deleteClub: {
    type: 'Club'
    args: Record<MutationDeleteClubArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: ClubWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Club | null> | prisma.Club | null
  }
  deleteManyClubs: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyClubsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: ClubWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createCourse: {
    type: 'Course'
    args: Record<MutationCreateCourseArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: CourseCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Course> | prisma.Course
  }
  updateCourse: {
    type: 'Course'
    args: Record<MutationUpdateCourseArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: CourseUpdateInput, where: CourseWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Course | null> | prisma.Course | null
  }
  updateManyCourses: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyCoursesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: CourseUpdateManyMutationInput, where?: CourseWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertCourse: {
    type: 'Course'
    args: Record<MutationUpsertCourseArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: CourseWhereUniqueInput, create: CourseCreateInput, update: CourseUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Course> | prisma.Course
  }
  deleteCourse: {
    type: 'Course'
    args: Record<MutationDeleteCourseArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: CourseWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Course | null> | prisma.Course | null
  }
  deleteManyCourses: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyCoursesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: CourseWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createHole: {
    type: 'Hole'
    args: Record<MutationCreateHoleArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: HoleCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Hole> | prisma.Hole
  }
  updateHole: {
    type: 'Hole'
    args: Record<MutationUpdateHoleArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: HoleUpdateInput, where: HoleWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Hole | null> | prisma.Hole | null
  }
  updateManyHoles: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyHolesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: HoleUpdateManyMutationInput, where?: HoleWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertHole: {
    type: 'Hole'
    args: Record<MutationUpsertHoleArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: HoleWhereUniqueInput, create: HoleCreateInput, update: HoleUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Hole> | prisma.Hole
  }
  deleteHole: {
    type: 'Hole'
    args: Record<MutationDeleteHoleArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: HoleWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Hole | null> | prisma.Hole | null
  }
  deleteManyHoles: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyHolesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: HoleWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createGeodata: {
    type: 'Geodata'
    args: Record<MutationCreateGeodataArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: GeodataCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Geodata> | prisma.Geodata
  }
  updateGeodata: {
    type: 'Geodata'
    args: Record<MutationUpdateGeodataArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: GeodataUpdateInput, where: GeodataWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Geodata | null> | prisma.Geodata | null
  }
  updateManyGeodatas: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyGeodatasArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: GeodataUpdateManyMutationInput, where?: GeodataWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertGeodata: {
    type: 'Geodata'
    args: Record<MutationUpsertGeodataArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: GeodataWhereUniqueInput, create: GeodataCreateInput, update: GeodataUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Geodata> | prisma.Geodata
  }
  deleteGeodata: {
    type: 'Geodata'
    args: Record<MutationDeleteGeodataArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: GeodataWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Geodata | null> | prisma.Geodata | null
  }
  deleteManyGeodatas: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyGeodatasArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: GeodataWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
}
  

// Types for BatchPayload

type BatchPayloadObject =
  | BatchPayloadFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type BatchPayloadFields =
  | 'count'



  

export interface BatchPayloadFieldDetails {
  count: {
    type: 'Long'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for Subscription

type SubscriptionObject =
  | SubscriptionFields
  | { name: 'user', args?: SubscriptionUserArgs[] | false, alias?: string  } 
  | { name: 'country', args?: SubscriptionCountryArgs[] | false, alias?: string  } 
  | { name: 'club', args?: SubscriptionClubArgs[] | false, alias?: string  } 
  | { name: 'course', args?: SubscriptionCourseArgs[] | false, alias?: string  } 
  | { name: 'hole', args?: SubscriptionHoleArgs[] | false, alias?: string  } 
  | { name: 'geodata', args?: SubscriptionGeodataArgs[] | false, alias?: string  } 

type SubscriptionFields =
  | 'user'
  | 'country'
  | 'club'
  | 'course'
  | 'hole'
  | 'geodata'


type SubscriptionUserArgs =
  | 'where'
type SubscriptionCountryArgs =
  | 'where'
type SubscriptionClubArgs =
  | 'where'
type SubscriptionCourseArgs =
  | 'where'
type SubscriptionHoleArgs =
  | 'where'
type SubscriptionGeodataArgs =
  | 'where'
  

export interface SubscriptionFieldDetails {
  user: {
    type: 'UserSubscriptionPayload'
    args: Record<SubscriptionUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: UserSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserSubscriptionPayload | null> | prisma.UserSubscriptionPayload | null
  }
  country: {
    type: 'CountrySubscriptionPayload'
    args: Record<SubscriptionCountryArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: CountrySubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CountrySubscriptionPayload | null> | prisma.CountrySubscriptionPayload | null
  }
  club: {
    type: 'ClubSubscriptionPayload'
    args: Record<SubscriptionClubArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: ClubSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ClubSubscriptionPayload | null> | prisma.ClubSubscriptionPayload | null
  }
  course: {
    type: 'CourseSubscriptionPayload'
    args: Record<SubscriptionCourseArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: CourseSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CourseSubscriptionPayload | null> | prisma.CourseSubscriptionPayload | null
  }
  hole: {
    type: 'HoleSubscriptionPayload'
    args: Record<SubscriptionHoleArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: HoleSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.HoleSubscriptionPayload | null> | prisma.HoleSubscriptionPayload | null
  }
  geodata: {
    type: 'GeodataSubscriptionPayload'
    args: Record<SubscriptionGeodataArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: GeodataSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.GeodataSubscriptionPayload | null> | prisma.GeodataSubscriptionPayload | null
  }
}
  

// Types for UserSubscriptionPayload

type UserSubscriptionPayloadObject =
  | UserSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type UserSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface UserSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"UserSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'User'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"UserSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User | null> | prisma.User | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'UserPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"UserSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserPreviousValues | null> | prisma.UserPreviousValues | null
  }
}
  

// Types for UserPreviousValues

type UserPreviousValuesObject =
  | UserPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'email', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'password', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 

type UserPreviousValuesFields =
  | 'id'
  | 'email'
  | 'name'
  | 'password'
  | 'createdAt'
  | 'updatedAt'



  

export interface UserPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  email: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  password: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for CountrySubscriptionPayload

type CountrySubscriptionPayloadObject =
  | CountrySubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type CountrySubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface CountrySubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"CountrySubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'Country'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"CountrySubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Country | null> | prisma.Country | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'CountryPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"CountrySubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CountryPreviousValues | null> | prisma.CountryPreviousValues | null
  }
}
  

// Types for CountryPreviousValues

type CountryPreviousValuesObject =
  | CountryPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'id_number', args?: [] | false, alias?: string  } 
  | { name: 'iso_numeric', args?: [] | false, alias?: string  } 
  | { name: 'iso_alpha_2', args?: [] | false, alias?: string  } 
  | { name: 'iso_alpha_3', args?: [] | false, alias?: string  } 
  | { name: 'name_en', args?: [] | false, alias?: string  } 
  | { name: 'name_kr', args?: [] | false, alias?: string  } 
  | { name: 'dial_number', args?: [] | false, alias?: string  } 

type CountryPreviousValuesFields =
  | 'id'
  | 'id_number'
  | 'iso_numeric'
  | 'iso_alpha_2'
  | 'iso_alpha_3'
  | 'name_en'
  | 'name_kr'
  | 'dial_number'



  

export interface CountryPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  id_number: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  iso_numeric: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  iso_alpha_2: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  iso_alpha_3: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  name_en: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name_kr: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  dial_number: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  

// Types for ClubSubscriptionPayload

type ClubSubscriptionPayloadObject =
  | ClubSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type ClubSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface ClubSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ClubSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'Club'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"ClubSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Club | null> | prisma.Club | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'ClubPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"ClubSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ClubPreviousValues | null> | prisma.ClubPreviousValues | null
  }
}
  

// Types for ClubPreviousValues

type ClubPreviousValuesObject =
  | ClubPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'id_number', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'name_origin', args?: [] | false, alias?: string  } 
  | { name: 'sw_lat', args?: [] | false, alias?: string  } 
  | { name: 'sw_lng', args?: [] | false, alias?: string  } 
  | { name: 'ne_lat', args?: [] | false, alias?: string  } 
  | { name: 'ne_lng', args?: [] | false, alias?: string  } 
  | { name: 'address1', args?: [] | false, alias?: string  } 
  | { name: 'address2', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 

type ClubPreviousValuesFields =
  | 'id'
  | 'id_number'
  | 'name'
  | 'name_origin'
  | 'sw_lat'
  | 'sw_lng'
  | 'ne_lat'
  | 'ne_lng'
  | 'address1'
  | 'address2'
  | 'createdAt'
  | 'updatedAt'



  

export interface ClubPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  id_number: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  name_origin: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  sw_lat: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  sw_lng: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  ne_lat: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  ne_lng: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  address1: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  address2: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for CourseSubscriptionPayload

type CourseSubscriptionPayloadObject =
  | CourseSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type CourseSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface CourseSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"CourseSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'Course'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"CourseSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Course | null> | prisma.Course | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'CoursePreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"CourseSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CoursePreviousValues | null> | prisma.CoursePreviousValues | null
  }
}
  

// Types for CoursePreviousValues

type CoursePreviousValuesObject =
  | CoursePreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'seq_no', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 

type CoursePreviousValuesFields =
  | 'id'
  | 'seq_no'
  | 'name'
  | 'createdAt'
  | 'updatedAt'



  

export interface CoursePreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  seq_no: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for HoleSubscriptionPayload

type HoleSubscriptionPayloadObject =
  | HoleSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type HoleSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface HoleSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"HoleSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'Hole'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"HoleSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Hole | null> | prisma.Hole | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'HolePreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"HoleSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.HolePreviousValues | null> | prisma.HolePreviousValues | null
  }
}
  

// Types for HolePreviousValues

type HolePreviousValuesObject =
  | HolePreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'seq_no', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 

type HolePreviousValuesFields =
  | 'id'
  | 'seq_no'
  | 'createdAt'
  | 'updatedAt'



  

export interface HolePreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  seq_no: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for GeodataSubscriptionPayload

type GeodataSubscriptionPayloadObject =
  | GeodataSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type GeodataSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface GeodataSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"GeodataSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'Geodata'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"GeodataSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Geodata | null> | prisma.Geodata | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'GeodataPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"GeodataSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.GeodataPreviousValues | null> | prisma.GeodataPreviousValues | null
  }
}
  

// Types for GeodataPreviousValues

type GeodataPreviousValuesObject =
  | GeodataPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'lat', args?: [] | false, alias?: string  } 
  | { name: 'lng', args?: [] | false, alias?: string  } 
  | { name: 'alt', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 

type GeodataPreviousValuesFields =
  | 'id'
  | 'lat'
  | 'lng'
  | 'alt'
  | 'createdAt'
  | 'updatedAt'



  

export interface GeodataPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  lat: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  lng: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  alt: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  


export interface UserWhereUniqueInput {
  id?: string | null
  email?: string | null
}
export type UserWhereUniqueInputInputObject =
  | Extract<keyof UserWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'email', alias?: string  } 
  
export interface UserWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  email?: string | null
  email_not?: string | null
  email_in?: string[]
  email_not_in?: string[]
  email_lt?: string | null
  email_lte?: string | null
  email_gt?: string | null
  email_gte?: string | null
  email_contains?: string | null
  email_not_contains?: string | null
  email_starts_with?: string | null
  email_not_starts_with?: string | null
  email_ends_with?: string | null
  email_not_ends_with?: string | null
  name?: string | null
  name_not?: string | null
  name_in?: string[]
  name_not_in?: string[]
  name_lt?: string | null
  name_lte?: string | null
  name_gt?: string | null
  name_gte?: string | null
  name_contains?: string | null
  name_not_contains?: string | null
  name_starts_with?: string | null
  name_not_starts_with?: string | null
  name_ends_with?: string | null
  name_not_ends_with?: string | null
  password?: string | null
  password_not?: string | null
  password_in?: string[]
  password_not_in?: string[]
  password_lt?: string | null
  password_lte?: string | null
  password_gt?: string | null
  password_gte?: string | null
  password_contains?: string | null
  password_not_contains?: string | null
  password_starts_with?: string | null
  password_not_starts_with?: string | null
  password_ends_with?: string | null
  password_not_ends_with?: string | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  AND?: UserWhereInput[]
  OR?: UserWhereInput[]
  NOT?: UserWhereInput[]
}
export type UserWhereInputInputObject =
  | Extract<keyof UserWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'email_not', alias?: string  } 
  | { name: 'email_in', alias?: string  } 
  | { name: 'email_not_in', alias?: string  } 
  | { name: 'email_lt', alias?: string  } 
  | { name: 'email_lte', alias?: string  } 
  | { name: 'email_gt', alias?: string  } 
  | { name: 'email_gte', alias?: string  } 
  | { name: 'email_contains', alias?: string  } 
  | { name: 'email_not_contains', alias?: string  } 
  | { name: 'email_starts_with', alias?: string  } 
  | { name: 'email_not_starts_with', alias?: string  } 
  | { name: 'email_ends_with', alias?: string  } 
  | { name: 'email_not_ends_with', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'name_not', alias?: string  } 
  | { name: 'name_in', alias?: string  } 
  | { name: 'name_not_in', alias?: string  } 
  | { name: 'name_lt', alias?: string  } 
  | { name: 'name_lte', alias?: string  } 
  | { name: 'name_gt', alias?: string  } 
  | { name: 'name_gte', alias?: string  } 
  | { name: 'name_contains', alias?: string  } 
  | { name: 'name_not_contains', alias?: string  } 
  | { name: 'name_starts_with', alias?: string  } 
  | { name: 'name_not_starts_with', alias?: string  } 
  | { name: 'name_ends_with', alias?: string  } 
  | { name: 'name_not_ends_with', alias?: string  } 
  | { name: 'password', alias?: string  } 
  | { name: 'password_not', alias?: string  } 
  | { name: 'password_in', alias?: string  } 
  | { name: 'password_not_in', alias?: string  } 
  | { name: 'password_lt', alias?: string  } 
  | { name: 'password_lte', alias?: string  } 
  | { name: 'password_gt', alias?: string  } 
  | { name: 'password_gte', alias?: string  } 
  | { name: 'password_contains', alias?: string  } 
  | { name: 'password_not_contains', alias?: string  } 
  | { name: 'password_starts_with', alias?: string  } 
  | { name: 'password_not_starts_with', alias?: string  } 
  | { name: 'password_ends_with', alias?: string  } 
  | { name: 'password_not_ends_with', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface CountryWhereUniqueInput {
  id?: string | null
  id_number?: number | null
  iso_numeric?: number | null
}
export type CountryWhereUniqueInputInputObject =
  | Extract<keyof CountryWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_number', alias?: string  } 
  | { name: 'iso_numeric', alias?: string  } 
  
export interface CountryWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  id_number?: number | null
  id_number_not?: number | null
  id_number_in?: number[]
  id_number_not_in?: number[]
  id_number_lt?: number | null
  id_number_lte?: number | null
  id_number_gt?: number | null
  id_number_gte?: number | null
  iso_numeric?: number | null
  iso_numeric_not?: number | null
  iso_numeric_in?: number[]
  iso_numeric_not_in?: number[]
  iso_numeric_lt?: number | null
  iso_numeric_lte?: number | null
  iso_numeric_gt?: number | null
  iso_numeric_gte?: number | null
  iso_alpha_2?: string | null
  iso_alpha_2_not?: string | null
  iso_alpha_2_in?: string[]
  iso_alpha_2_not_in?: string[]
  iso_alpha_2_lt?: string | null
  iso_alpha_2_lte?: string | null
  iso_alpha_2_gt?: string | null
  iso_alpha_2_gte?: string | null
  iso_alpha_2_contains?: string | null
  iso_alpha_2_not_contains?: string | null
  iso_alpha_2_starts_with?: string | null
  iso_alpha_2_not_starts_with?: string | null
  iso_alpha_2_ends_with?: string | null
  iso_alpha_2_not_ends_with?: string | null
  iso_alpha_3?: string | null
  iso_alpha_3_not?: string | null
  iso_alpha_3_in?: string[]
  iso_alpha_3_not_in?: string[]
  iso_alpha_3_lt?: string | null
  iso_alpha_3_lte?: string | null
  iso_alpha_3_gt?: string | null
  iso_alpha_3_gte?: string | null
  iso_alpha_3_contains?: string | null
  iso_alpha_3_not_contains?: string | null
  iso_alpha_3_starts_with?: string | null
  iso_alpha_3_not_starts_with?: string | null
  iso_alpha_3_ends_with?: string | null
  iso_alpha_3_not_ends_with?: string | null
  name_en?: string | null
  name_en_not?: string | null
  name_en_in?: string[]
  name_en_not_in?: string[]
  name_en_lt?: string | null
  name_en_lte?: string | null
  name_en_gt?: string | null
  name_en_gte?: string | null
  name_en_contains?: string | null
  name_en_not_contains?: string | null
  name_en_starts_with?: string | null
  name_en_not_starts_with?: string | null
  name_en_ends_with?: string | null
  name_en_not_ends_with?: string | null
  name_kr?: string | null
  name_kr_not?: string | null
  name_kr_in?: string[]
  name_kr_not_in?: string[]
  name_kr_lt?: string | null
  name_kr_lte?: string | null
  name_kr_gt?: string | null
  name_kr_gte?: string | null
  name_kr_contains?: string | null
  name_kr_not_contains?: string | null
  name_kr_starts_with?: string | null
  name_kr_not_starts_with?: string | null
  name_kr_ends_with?: string | null
  name_kr_not_ends_with?: string | null
  dial_number?: string | null
  dial_number_not?: string | null
  dial_number_in?: string[]
  dial_number_not_in?: string[]
  dial_number_lt?: string | null
  dial_number_lte?: string | null
  dial_number_gt?: string | null
  dial_number_gte?: string | null
  dial_number_contains?: string | null
  dial_number_not_contains?: string | null
  dial_number_starts_with?: string | null
  dial_number_not_starts_with?: string | null
  dial_number_ends_with?: string | null
  dial_number_not_ends_with?: string | null
  AND?: CountryWhereInput[]
  OR?: CountryWhereInput[]
  NOT?: CountryWhereInput[]
}
export type CountryWhereInputInputObject =
  | Extract<keyof CountryWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'id_number', alias?: string  } 
  | { name: 'id_number_not', alias?: string  } 
  | { name: 'id_number_in', alias?: string  } 
  | { name: 'id_number_not_in', alias?: string  } 
  | { name: 'id_number_lt', alias?: string  } 
  | { name: 'id_number_lte', alias?: string  } 
  | { name: 'id_number_gt', alias?: string  } 
  | { name: 'id_number_gte', alias?: string  } 
  | { name: 'iso_numeric', alias?: string  } 
  | { name: 'iso_numeric_not', alias?: string  } 
  | { name: 'iso_numeric_in', alias?: string  } 
  | { name: 'iso_numeric_not_in', alias?: string  } 
  | { name: 'iso_numeric_lt', alias?: string  } 
  | { name: 'iso_numeric_lte', alias?: string  } 
  | { name: 'iso_numeric_gt', alias?: string  } 
  | { name: 'iso_numeric_gte', alias?: string  } 
  | { name: 'iso_alpha_2', alias?: string  } 
  | { name: 'iso_alpha_2_not', alias?: string  } 
  | { name: 'iso_alpha_2_in', alias?: string  } 
  | { name: 'iso_alpha_2_not_in', alias?: string  } 
  | { name: 'iso_alpha_2_lt', alias?: string  } 
  | { name: 'iso_alpha_2_lte', alias?: string  } 
  | { name: 'iso_alpha_2_gt', alias?: string  } 
  | { name: 'iso_alpha_2_gte', alias?: string  } 
  | { name: 'iso_alpha_2_contains', alias?: string  } 
  | { name: 'iso_alpha_2_not_contains', alias?: string  } 
  | { name: 'iso_alpha_2_starts_with', alias?: string  } 
  | { name: 'iso_alpha_2_not_starts_with', alias?: string  } 
  | { name: 'iso_alpha_2_ends_with', alias?: string  } 
  | { name: 'iso_alpha_2_not_ends_with', alias?: string  } 
  | { name: 'iso_alpha_3', alias?: string  } 
  | { name: 'iso_alpha_3_not', alias?: string  } 
  | { name: 'iso_alpha_3_in', alias?: string  } 
  | { name: 'iso_alpha_3_not_in', alias?: string  } 
  | { name: 'iso_alpha_3_lt', alias?: string  } 
  | { name: 'iso_alpha_3_lte', alias?: string  } 
  | { name: 'iso_alpha_3_gt', alias?: string  } 
  | { name: 'iso_alpha_3_gte', alias?: string  } 
  | { name: 'iso_alpha_3_contains', alias?: string  } 
  | { name: 'iso_alpha_3_not_contains', alias?: string  } 
  | { name: 'iso_alpha_3_starts_with', alias?: string  } 
  | { name: 'iso_alpha_3_not_starts_with', alias?: string  } 
  | { name: 'iso_alpha_3_ends_with', alias?: string  } 
  | { name: 'iso_alpha_3_not_ends_with', alias?: string  } 
  | { name: 'name_en', alias?: string  } 
  | { name: 'name_en_not', alias?: string  } 
  | { name: 'name_en_in', alias?: string  } 
  | { name: 'name_en_not_in', alias?: string  } 
  | { name: 'name_en_lt', alias?: string  } 
  | { name: 'name_en_lte', alias?: string  } 
  | { name: 'name_en_gt', alias?: string  } 
  | { name: 'name_en_gte', alias?: string  } 
  | { name: 'name_en_contains', alias?: string  } 
  | { name: 'name_en_not_contains', alias?: string  } 
  | { name: 'name_en_starts_with', alias?: string  } 
  | { name: 'name_en_not_starts_with', alias?: string  } 
  | { name: 'name_en_ends_with', alias?: string  } 
  | { name: 'name_en_not_ends_with', alias?: string  } 
  | { name: 'name_kr', alias?: string  } 
  | { name: 'name_kr_not', alias?: string  } 
  | { name: 'name_kr_in', alias?: string  } 
  | { name: 'name_kr_not_in', alias?: string  } 
  | { name: 'name_kr_lt', alias?: string  } 
  | { name: 'name_kr_lte', alias?: string  } 
  | { name: 'name_kr_gt', alias?: string  } 
  | { name: 'name_kr_gte', alias?: string  } 
  | { name: 'name_kr_contains', alias?: string  } 
  | { name: 'name_kr_not_contains', alias?: string  } 
  | { name: 'name_kr_starts_with', alias?: string  } 
  | { name: 'name_kr_not_starts_with', alias?: string  } 
  | { name: 'name_kr_ends_with', alias?: string  } 
  | { name: 'name_kr_not_ends_with', alias?: string  } 
  | { name: 'dial_number', alias?: string  } 
  | { name: 'dial_number_not', alias?: string  } 
  | { name: 'dial_number_in', alias?: string  } 
  | { name: 'dial_number_not_in', alias?: string  } 
  | { name: 'dial_number_lt', alias?: string  } 
  | { name: 'dial_number_lte', alias?: string  } 
  | { name: 'dial_number_gt', alias?: string  } 
  | { name: 'dial_number_gte', alias?: string  } 
  | { name: 'dial_number_contains', alias?: string  } 
  | { name: 'dial_number_not_contains', alias?: string  } 
  | { name: 'dial_number_starts_with', alias?: string  } 
  | { name: 'dial_number_not_starts_with', alias?: string  } 
  | { name: 'dial_number_ends_with', alias?: string  } 
  | { name: 'dial_number_not_ends_with', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface ClubWhereUniqueInput {
  id?: string | null
  id_number?: number | null
}
export type ClubWhereUniqueInputInputObject =
  | Extract<keyof ClubWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_number', alias?: string  } 
  
export interface CourseWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  club?: ClubWhereInput | null
  seq_no?: number | null
  seq_no_not?: number | null
  seq_no_in?: number[]
  seq_no_not_in?: number[]
  seq_no_lt?: number | null
  seq_no_lte?: number | null
  seq_no_gt?: number | null
  seq_no_gte?: number | null
  name?: string | null
  name_not?: string | null
  name_in?: string[]
  name_not_in?: string[]
  name_lt?: string | null
  name_lte?: string | null
  name_gt?: string | null
  name_gte?: string | null
  name_contains?: string | null
  name_not_contains?: string | null
  name_starts_with?: string | null
  name_not_starts_with?: string | null
  name_ends_with?: string | null
  name_not_ends_with?: string | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  AND?: CourseWhereInput[]
  OR?: CourseWhereInput[]
  NOT?: CourseWhereInput[]
}
export type CourseWhereInputInputObject =
  | Extract<keyof CourseWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'club', alias?: string  } 
  | { name: 'seq_no', alias?: string  } 
  | { name: 'seq_no_not', alias?: string  } 
  | { name: 'seq_no_in', alias?: string  } 
  | { name: 'seq_no_not_in', alias?: string  } 
  | { name: 'seq_no_lt', alias?: string  } 
  | { name: 'seq_no_lte', alias?: string  } 
  | { name: 'seq_no_gt', alias?: string  } 
  | { name: 'seq_no_gte', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'name_not', alias?: string  } 
  | { name: 'name_in', alias?: string  } 
  | { name: 'name_not_in', alias?: string  } 
  | { name: 'name_lt', alias?: string  } 
  | { name: 'name_lte', alias?: string  } 
  | { name: 'name_gt', alias?: string  } 
  | { name: 'name_gte', alias?: string  } 
  | { name: 'name_contains', alias?: string  } 
  | { name: 'name_not_contains', alias?: string  } 
  | { name: 'name_starts_with', alias?: string  } 
  | { name: 'name_not_starts_with', alias?: string  } 
  | { name: 'name_ends_with', alias?: string  } 
  | { name: 'name_not_ends_with', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface ClubWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  id_number?: number | null
  id_number_not?: number | null
  id_number_in?: number[]
  id_number_not_in?: number[]
  id_number_lt?: number | null
  id_number_lte?: number | null
  id_number_gt?: number | null
  id_number_gte?: number | null
  name?: string | null
  name_not?: string | null
  name_in?: string[]
  name_not_in?: string[]
  name_lt?: string | null
  name_lte?: string | null
  name_gt?: string | null
  name_gte?: string | null
  name_contains?: string | null
  name_not_contains?: string | null
  name_starts_with?: string | null
  name_not_starts_with?: string | null
  name_ends_with?: string | null
  name_not_ends_with?: string | null
  name_origin?: string | null
  name_origin_not?: string | null
  name_origin_in?: string[]
  name_origin_not_in?: string[]
  name_origin_lt?: string | null
  name_origin_lte?: string | null
  name_origin_gt?: string | null
  name_origin_gte?: string | null
  name_origin_contains?: string | null
  name_origin_not_contains?: string | null
  name_origin_starts_with?: string | null
  name_origin_not_starts_with?: string | null
  name_origin_ends_with?: string | null
  name_origin_not_ends_with?: string | null
  sw_lat?: string | null
  sw_lat_not?: string | null
  sw_lat_in?: string[]
  sw_lat_not_in?: string[]
  sw_lat_lt?: string | null
  sw_lat_lte?: string | null
  sw_lat_gt?: string | null
  sw_lat_gte?: string | null
  sw_lat_contains?: string | null
  sw_lat_not_contains?: string | null
  sw_lat_starts_with?: string | null
  sw_lat_not_starts_with?: string | null
  sw_lat_ends_with?: string | null
  sw_lat_not_ends_with?: string | null
  sw_lng?: string | null
  sw_lng_not?: string | null
  sw_lng_in?: string[]
  sw_lng_not_in?: string[]
  sw_lng_lt?: string | null
  sw_lng_lte?: string | null
  sw_lng_gt?: string | null
  sw_lng_gte?: string | null
  sw_lng_contains?: string | null
  sw_lng_not_contains?: string | null
  sw_lng_starts_with?: string | null
  sw_lng_not_starts_with?: string | null
  sw_lng_ends_with?: string | null
  sw_lng_not_ends_with?: string | null
  ne_lat?: string | null
  ne_lat_not?: string | null
  ne_lat_in?: string[]
  ne_lat_not_in?: string[]
  ne_lat_lt?: string | null
  ne_lat_lte?: string | null
  ne_lat_gt?: string | null
  ne_lat_gte?: string | null
  ne_lat_contains?: string | null
  ne_lat_not_contains?: string | null
  ne_lat_starts_with?: string | null
  ne_lat_not_starts_with?: string | null
  ne_lat_ends_with?: string | null
  ne_lat_not_ends_with?: string | null
  ne_lng?: string | null
  ne_lng_not?: string | null
  ne_lng_in?: string[]
  ne_lng_not_in?: string[]
  ne_lng_lt?: string | null
  ne_lng_lte?: string | null
  ne_lng_gt?: string | null
  ne_lng_gte?: string | null
  ne_lng_contains?: string | null
  ne_lng_not_contains?: string | null
  ne_lng_starts_with?: string | null
  ne_lng_not_starts_with?: string | null
  ne_lng_ends_with?: string | null
  ne_lng_not_ends_with?: string | null
  address1?: string | null
  address1_not?: string | null
  address1_in?: string[]
  address1_not_in?: string[]
  address1_lt?: string | null
  address1_lte?: string | null
  address1_gt?: string | null
  address1_gte?: string | null
  address1_contains?: string | null
  address1_not_contains?: string | null
  address1_starts_with?: string | null
  address1_not_starts_with?: string | null
  address1_ends_with?: string | null
  address1_not_ends_with?: string | null
  address2?: string | null
  address2_not?: string | null
  address2_in?: string[]
  address2_not_in?: string[]
  address2_lt?: string | null
  address2_lte?: string | null
  address2_gt?: string | null
  address2_gte?: string | null
  address2_contains?: string | null
  address2_not_contains?: string | null
  address2_starts_with?: string | null
  address2_not_starts_with?: string | null
  address2_ends_with?: string | null
  address2_not_ends_with?: string | null
  contry?: CountryWhereInput | null
  course_every?: CourseWhereInput | null
  course_some?: CourseWhereInput | null
  course_none?: CourseWhereInput | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  AND?: ClubWhereInput[]
  OR?: ClubWhereInput[]
  NOT?: ClubWhereInput[]
}
export type ClubWhereInputInputObject =
  | Extract<keyof ClubWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'id_number', alias?: string  } 
  | { name: 'id_number_not', alias?: string  } 
  | { name: 'id_number_in', alias?: string  } 
  | { name: 'id_number_not_in', alias?: string  } 
  | { name: 'id_number_lt', alias?: string  } 
  | { name: 'id_number_lte', alias?: string  } 
  | { name: 'id_number_gt', alias?: string  } 
  | { name: 'id_number_gte', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'name_not', alias?: string  } 
  | { name: 'name_in', alias?: string  } 
  | { name: 'name_not_in', alias?: string  } 
  | { name: 'name_lt', alias?: string  } 
  | { name: 'name_lte', alias?: string  } 
  | { name: 'name_gt', alias?: string  } 
  | { name: 'name_gte', alias?: string  } 
  | { name: 'name_contains', alias?: string  } 
  | { name: 'name_not_contains', alias?: string  } 
  | { name: 'name_starts_with', alias?: string  } 
  | { name: 'name_not_starts_with', alias?: string  } 
  | { name: 'name_ends_with', alias?: string  } 
  | { name: 'name_not_ends_with', alias?: string  } 
  | { name: 'name_origin', alias?: string  } 
  | { name: 'name_origin_not', alias?: string  } 
  | { name: 'name_origin_in', alias?: string  } 
  | { name: 'name_origin_not_in', alias?: string  } 
  | { name: 'name_origin_lt', alias?: string  } 
  | { name: 'name_origin_lte', alias?: string  } 
  | { name: 'name_origin_gt', alias?: string  } 
  | { name: 'name_origin_gte', alias?: string  } 
  | { name: 'name_origin_contains', alias?: string  } 
  | { name: 'name_origin_not_contains', alias?: string  } 
  | { name: 'name_origin_starts_with', alias?: string  } 
  | { name: 'name_origin_not_starts_with', alias?: string  } 
  | { name: 'name_origin_ends_with', alias?: string  } 
  | { name: 'name_origin_not_ends_with', alias?: string  } 
  | { name: 'sw_lat', alias?: string  } 
  | { name: 'sw_lat_not', alias?: string  } 
  | { name: 'sw_lat_in', alias?: string  } 
  | { name: 'sw_lat_not_in', alias?: string  } 
  | { name: 'sw_lat_lt', alias?: string  } 
  | { name: 'sw_lat_lte', alias?: string  } 
  | { name: 'sw_lat_gt', alias?: string  } 
  | { name: 'sw_lat_gte', alias?: string  } 
  | { name: 'sw_lat_contains', alias?: string  } 
  | { name: 'sw_lat_not_contains', alias?: string  } 
  | { name: 'sw_lat_starts_with', alias?: string  } 
  | { name: 'sw_lat_not_starts_with', alias?: string  } 
  | { name: 'sw_lat_ends_with', alias?: string  } 
  | { name: 'sw_lat_not_ends_with', alias?: string  } 
  | { name: 'sw_lng', alias?: string  } 
  | { name: 'sw_lng_not', alias?: string  } 
  | { name: 'sw_lng_in', alias?: string  } 
  | { name: 'sw_lng_not_in', alias?: string  } 
  | { name: 'sw_lng_lt', alias?: string  } 
  | { name: 'sw_lng_lte', alias?: string  } 
  | { name: 'sw_lng_gt', alias?: string  } 
  | { name: 'sw_lng_gte', alias?: string  } 
  | { name: 'sw_lng_contains', alias?: string  } 
  | { name: 'sw_lng_not_contains', alias?: string  } 
  | { name: 'sw_lng_starts_with', alias?: string  } 
  | { name: 'sw_lng_not_starts_with', alias?: string  } 
  | { name: 'sw_lng_ends_with', alias?: string  } 
  | { name: 'sw_lng_not_ends_with', alias?: string  } 
  | { name: 'ne_lat', alias?: string  } 
  | { name: 'ne_lat_not', alias?: string  } 
  | { name: 'ne_lat_in', alias?: string  } 
  | { name: 'ne_lat_not_in', alias?: string  } 
  | { name: 'ne_lat_lt', alias?: string  } 
  | { name: 'ne_lat_lte', alias?: string  } 
  | { name: 'ne_lat_gt', alias?: string  } 
  | { name: 'ne_lat_gte', alias?: string  } 
  | { name: 'ne_lat_contains', alias?: string  } 
  | { name: 'ne_lat_not_contains', alias?: string  } 
  | { name: 'ne_lat_starts_with', alias?: string  } 
  | { name: 'ne_lat_not_starts_with', alias?: string  } 
  | { name: 'ne_lat_ends_with', alias?: string  } 
  | { name: 'ne_lat_not_ends_with', alias?: string  } 
  | { name: 'ne_lng', alias?: string  } 
  | { name: 'ne_lng_not', alias?: string  } 
  | { name: 'ne_lng_in', alias?: string  } 
  | { name: 'ne_lng_not_in', alias?: string  } 
  | { name: 'ne_lng_lt', alias?: string  } 
  | { name: 'ne_lng_lte', alias?: string  } 
  | { name: 'ne_lng_gt', alias?: string  } 
  | { name: 'ne_lng_gte', alias?: string  } 
  | { name: 'ne_lng_contains', alias?: string  } 
  | { name: 'ne_lng_not_contains', alias?: string  } 
  | { name: 'ne_lng_starts_with', alias?: string  } 
  | { name: 'ne_lng_not_starts_with', alias?: string  } 
  | { name: 'ne_lng_ends_with', alias?: string  } 
  | { name: 'ne_lng_not_ends_with', alias?: string  } 
  | { name: 'address1', alias?: string  } 
  | { name: 'address1_not', alias?: string  } 
  | { name: 'address1_in', alias?: string  } 
  | { name: 'address1_not_in', alias?: string  } 
  | { name: 'address1_lt', alias?: string  } 
  | { name: 'address1_lte', alias?: string  } 
  | { name: 'address1_gt', alias?: string  } 
  | { name: 'address1_gte', alias?: string  } 
  | { name: 'address1_contains', alias?: string  } 
  | { name: 'address1_not_contains', alias?: string  } 
  | { name: 'address1_starts_with', alias?: string  } 
  | { name: 'address1_not_starts_with', alias?: string  } 
  | { name: 'address1_ends_with', alias?: string  } 
  | { name: 'address1_not_ends_with', alias?: string  } 
  | { name: 'address2', alias?: string  } 
  | { name: 'address2_not', alias?: string  } 
  | { name: 'address2_in', alias?: string  } 
  | { name: 'address2_not_in', alias?: string  } 
  | { name: 'address2_lt', alias?: string  } 
  | { name: 'address2_lte', alias?: string  } 
  | { name: 'address2_gt', alias?: string  } 
  | { name: 'address2_gte', alias?: string  } 
  | { name: 'address2_contains', alias?: string  } 
  | { name: 'address2_not_contains', alias?: string  } 
  | { name: 'address2_starts_with', alias?: string  } 
  | { name: 'address2_not_starts_with', alias?: string  } 
  | { name: 'address2_ends_with', alias?: string  } 
  | { name: 'address2_not_ends_with', alias?: string  } 
  | { name: 'contry', alias?: string  } 
  | { name: 'course_every', alias?: string  } 
  | { name: 'course_some', alias?: string  } 
  | { name: 'course_none', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface CourseWhereUniqueInput {
  id?: string | null
}
export type CourseWhereUniqueInputInputObject =
  | Extract<keyof CourseWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface HoleWhereUniqueInput {
  id?: string | null
}
export type HoleWhereUniqueInputInputObject =
  | Extract<keyof HoleWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface HoleWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  seq_no?: number | null
  seq_no_not?: number | null
  seq_no_in?: number[]
  seq_no_not_in?: number[]
  seq_no_lt?: number | null
  seq_no_lte?: number | null
  seq_no_gt?: number | null
  seq_no_gte?: number | null
  course?: CourseWhereInput | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  AND?: HoleWhereInput[]
  OR?: HoleWhereInput[]
  NOT?: HoleWhereInput[]
}
export type HoleWhereInputInputObject =
  | Extract<keyof HoleWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'seq_no', alias?: string  } 
  | { name: 'seq_no_not', alias?: string  } 
  | { name: 'seq_no_in', alias?: string  } 
  | { name: 'seq_no_not_in', alias?: string  } 
  | { name: 'seq_no_lt', alias?: string  } 
  | { name: 'seq_no_lte', alias?: string  } 
  | { name: 'seq_no_gt', alias?: string  } 
  | { name: 'seq_no_gte', alias?: string  } 
  | { name: 'course', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface GeodataWhereUniqueInput {
  id?: string | null
}
export type GeodataWhereUniqueInputInputObject =
  | Extract<keyof GeodataWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface GeodataWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  course?: CourseWhereInput | null
  lat?: string | null
  lat_not?: string | null
  lat_in?: string[]
  lat_not_in?: string[]
  lat_lt?: string | null
  lat_lte?: string | null
  lat_gt?: string | null
  lat_gte?: string | null
  lat_contains?: string | null
  lat_not_contains?: string | null
  lat_starts_with?: string | null
  lat_not_starts_with?: string | null
  lat_ends_with?: string | null
  lat_not_ends_with?: string | null
  lng?: string | null
  lng_not?: string | null
  lng_in?: string[]
  lng_not_in?: string[]
  lng_lt?: string | null
  lng_lte?: string | null
  lng_gt?: string | null
  lng_gte?: string | null
  lng_contains?: string | null
  lng_not_contains?: string | null
  lng_starts_with?: string | null
  lng_not_starts_with?: string | null
  lng_ends_with?: string | null
  lng_not_ends_with?: string | null
  alt?: string | null
  alt_not?: string | null
  alt_in?: string[]
  alt_not_in?: string[]
  alt_lt?: string | null
  alt_lte?: string | null
  alt_gt?: string | null
  alt_gte?: string | null
  alt_contains?: string | null
  alt_not_contains?: string | null
  alt_starts_with?: string | null
  alt_not_starts_with?: string | null
  alt_ends_with?: string | null
  alt_not_ends_with?: string | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  AND?: GeodataWhereInput[]
  OR?: GeodataWhereInput[]
  NOT?: GeodataWhereInput[]
}
export type GeodataWhereInputInputObject =
  | Extract<keyof GeodataWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'course', alias?: string  } 
  | { name: 'lat', alias?: string  } 
  | { name: 'lat_not', alias?: string  } 
  | { name: 'lat_in', alias?: string  } 
  | { name: 'lat_not_in', alias?: string  } 
  | { name: 'lat_lt', alias?: string  } 
  | { name: 'lat_lte', alias?: string  } 
  | { name: 'lat_gt', alias?: string  } 
  | { name: 'lat_gte', alias?: string  } 
  | { name: 'lat_contains', alias?: string  } 
  | { name: 'lat_not_contains', alias?: string  } 
  | { name: 'lat_starts_with', alias?: string  } 
  | { name: 'lat_not_starts_with', alias?: string  } 
  | { name: 'lat_ends_with', alias?: string  } 
  | { name: 'lat_not_ends_with', alias?: string  } 
  | { name: 'lng', alias?: string  } 
  | { name: 'lng_not', alias?: string  } 
  | { name: 'lng_in', alias?: string  } 
  | { name: 'lng_not_in', alias?: string  } 
  | { name: 'lng_lt', alias?: string  } 
  | { name: 'lng_lte', alias?: string  } 
  | { name: 'lng_gt', alias?: string  } 
  | { name: 'lng_gte', alias?: string  } 
  | { name: 'lng_contains', alias?: string  } 
  | { name: 'lng_not_contains', alias?: string  } 
  | { name: 'lng_starts_with', alias?: string  } 
  | { name: 'lng_not_starts_with', alias?: string  } 
  | { name: 'lng_ends_with', alias?: string  } 
  | { name: 'lng_not_ends_with', alias?: string  } 
  | { name: 'alt', alias?: string  } 
  | { name: 'alt_not', alias?: string  } 
  | { name: 'alt_in', alias?: string  } 
  | { name: 'alt_not_in', alias?: string  } 
  | { name: 'alt_lt', alias?: string  } 
  | { name: 'alt_lte', alias?: string  } 
  | { name: 'alt_gt', alias?: string  } 
  | { name: 'alt_gte', alias?: string  } 
  | { name: 'alt_contains', alias?: string  } 
  | { name: 'alt_not_contains', alias?: string  } 
  | { name: 'alt_starts_with', alias?: string  } 
  | { name: 'alt_not_starts_with', alias?: string  } 
  | { name: 'alt_ends_with', alias?: string  } 
  | { name: 'alt_not_ends_with', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface UserCreateInput {
  id?: string | null
  email?: string | null
  name?: string
  password?: string
}
export type UserCreateInputInputObject =
  | Extract<keyof UserCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'password', alias?: string  } 
  
export interface UserUpdateInput {
  email?: string | null
  name?: string | null
  password?: string | null
}
export type UserUpdateInputInputObject =
  | Extract<keyof UserUpdateInput, string>
  | { name: 'email', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'password', alias?: string  } 
  
export interface UserUpdateManyMutationInput {
  email?: string | null
  name?: string | null
  password?: string | null
}
export type UserUpdateManyMutationInputInputObject =
  | Extract<keyof UserUpdateManyMutationInput, string>
  | { name: 'email', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'password', alias?: string  } 
  
export interface CountryCreateInput {
  id?: string | null
  id_number?: number | null
  iso_numeric?: number | null
  iso_alpha_2?: string | null
  iso_alpha_3?: string | null
  name_en?: string
  name_kr?: string | null
  dial_number?: string | null
}
export type CountryCreateInputInputObject =
  | Extract<keyof CountryCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_number', alias?: string  } 
  | { name: 'iso_numeric', alias?: string  } 
  | { name: 'iso_alpha_2', alias?: string  } 
  | { name: 'iso_alpha_3', alias?: string  } 
  | { name: 'name_en', alias?: string  } 
  | { name: 'name_kr', alias?: string  } 
  | { name: 'dial_number', alias?: string  } 
  
export interface CountryUpdateInput {
  id_number?: number | null
  iso_numeric?: number | null
  iso_alpha_2?: string | null
  iso_alpha_3?: string | null
  name_en?: string | null
  name_kr?: string | null
  dial_number?: string | null
}
export type CountryUpdateInputInputObject =
  | Extract<keyof CountryUpdateInput, string>
  | { name: 'id_number', alias?: string  } 
  | { name: 'iso_numeric', alias?: string  } 
  | { name: 'iso_alpha_2', alias?: string  } 
  | { name: 'iso_alpha_3', alias?: string  } 
  | { name: 'name_en', alias?: string  } 
  | { name: 'name_kr', alias?: string  } 
  | { name: 'dial_number', alias?: string  } 
  
export interface CountryUpdateManyMutationInput {
  id_number?: number | null
  iso_numeric?: number | null
  iso_alpha_2?: string | null
  iso_alpha_3?: string | null
  name_en?: string | null
  name_kr?: string | null
  dial_number?: string | null
}
export type CountryUpdateManyMutationInputInputObject =
  | Extract<keyof CountryUpdateManyMutationInput, string>
  | { name: 'id_number', alias?: string  } 
  | { name: 'iso_numeric', alias?: string  } 
  | { name: 'iso_alpha_2', alias?: string  } 
  | { name: 'iso_alpha_3', alias?: string  } 
  | { name: 'name_en', alias?: string  } 
  | { name: 'name_kr', alias?: string  } 
  | { name: 'dial_number', alias?: string  } 
  
export interface ClubCreateInput {
  id?: string | null
  id_number?: number | null
  name?: string | null
  name_origin?: string | null
  sw_lat?: string | null
  sw_lng?: string | null
  ne_lat?: string | null
  ne_lng?: string | null
  address1?: string | null
  address2?: string | null
  contry?: CountryCreateOneInput | null
  course?: CourseCreateManyWithoutClubInput | null
}
export type ClubCreateInputInputObject =
  | Extract<keyof ClubCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_number', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'name_origin', alias?: string  } 
  | { name: 'sw_lat', alias?: string  } 
  | { name: 'sw_lng', alias?: string  } 
  | { name: 'ne_lat', alias?: string  } 
  | { name: 'ne_lng', alias?: string  } 
  | { name: 'address1', alias?: string  } 
  | { name: 'address2', alias?: string  } 
  | { name: 'contry', alias?: string  } 
  | { name: 'course', alias?: string  } 
  
export interface CountryCreateOneInput {
  create?: CountryCreateInput | null
  connect?: CountryWhereUniqueInput | null
}
export type CountryCreateOneInputInputObject =
  | Extract<keyof CountryCreateOneInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface CourseCreateManyWithoutClubInput {
  create?: CourseCreateWithoutClubInput[]
  connect?: CourseWhereUniqueInput[]
}
export type CourseCreateManyWithoutClubInputInputObject =
  | Extract<keyof CourseCreateManyWithoutClubInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface CourseCreateWithoutClubInput {
  id?: string | null
  seq_no?: number | null
  name?: string
}
export type CourseCreateWithoutClubInputInputObject =
  | Extract<keyof CourseCreateWithoutClubInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'seq_no', alias?: string  } 
  | { name: 'name', alias?: string  } 
  
export interface ClubUpdateInput {
  id_number?: number | null
  name?: string | null
  name_origin?: string | null
  sw_lat?: string | null
  sw_lng?: string | null
  ne_lat?: string | null
  ne_lng?: string | null
  address1?: string | null
  address2?: string | null
  contry?: CountryUpdateOneInput | null
  course?: CourseUpdateManyWithoutClubInput | null
}
export type ClubUpdateInputInputObject =
  | Extract<keyof ClubUpdateInput, string>
  | { name: 'id_number', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'name_origin', alias?: string  } 
  | { name: 'sw_lat', alias?: string  } 
  | { name: 'sw_lng', alias?: string  } 
  | { name: 'ne_lat', alias?: string  } 
  | { name: 'ne_lng', alias?: string  } 
  | { name: 'address1', alias?: string  } 
  | { name: 'address2', alias?: string  } 
  | { name: 'contry', alias?: string  } 
  | { name: 'course', alias?: string  } 
  
export interface CountryUpdateOneInput {
  create?: CountryCreateInput | null
  update?: CountryUpdateDataInput | null
  upsert?: CountryUpsertNestedInput | null
  delete?: boolean | null
  disconnect?: boolean | null
  connect?: CountryWhereUniqueInput | null
}
export type CountryUpdateOneInputInputObject =
  | Extract<keyof CountryUpdateOneInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface CountryUpdateDataInput {
  id_number?: number | null
  iso_numeric?: number | null
  iso_alpha_2?: string | null
  iso_alpha_3?: string | null
  name_en?: string | null
  name_kr?: string | null
  dial_number?: string | null
}
export type CountryUpdateDataInputInputObject =
  | Extract<keyof CountryUpdateDataInput, string>
  | { name: 'id_number', alias?: string  } 
  | { name: 'iso_numeric', alias?: string  } 
  | { name: 'iso_alpha_2', alias?: string  } 
  | { name: 'iso_alpha_3', alias?: string  } 
  | { name: 'name_en', alias?: string  } 
  | { name: 'name_kr', alias?: string  } 
  | { name: 'dial_number', alias?: string  } 
  
export interface CountryUpsertNestedInput {
  update?: CountryUpdateDataInput
  create?: CountryCreateInput
}
export type CountryUpsertNestedInputInputObject =
  | Extract<keyof CountryUpsertNestedInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface CourseUpdateManyWithoutClubInput {
  create?: CourseCreateWithoutClubInput[]
  delete?: CourseWhereUniqueInput[]
  connect?: CourseWhereUniqueInput[]
  set?: CourseWhereUniqueInput[]
  disconnect?: CourseWhereUniqueInput[]
  update?: CourseUpdateWithWhereUniqueWithoutClubInput[]
  upsert?: CourseUpsertWithWhereUniqueWithoutClubInput[]
  deleteMany?: CourseScalarWhereInput[]
  updateMany?: CourseUpdateManyWithWhereNestedInput[]
}
export type CourseUpdateManyWithoutClubInputInputObject =
  | Extract<keyof CourseUpdateManyWithoutClubInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface CourseUpdateWithWhereUniqueWithoutClubInput {
  where?: CourseWhereUniqueInput
  data?: CourseUpdateWithoutClubDataInput
}
export type CourseUpdateWithWhereUniqueWithoutClubInputInputObject =
  | Extract<keyof CourseUpdateWithWhereUniqueWithoutClubInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface CourseUpdateWithoutClubDataInput {
  seq_no?: number | null
  name?: string | null
}
export type CourseUpdateWithoutClubDataInputInputObject =
  | Extract<keyof CourseUpdateWithoutClubDataInput, string>
  | { name: 'seq_no', alias?: string  } 
  | { name: 'name', alias?: string  } 
  
export interface CourseUpsertWithWhereUniqueWithoutClubInput {
  where?: CourseWhereUniqueInput
  update?: CourseUpdateWithoutClubDataInput
  create?: CourseCreateWithoutClubInput
}
export type CourseUpsertWithWhereUniqueWithoutClubInputInputObject =
  | Extract<keyof CourseUpsertWithWhereUniqueWithoutClubInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface CourseScalarWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  seq_no?: number | null
  seq_no_not?: number | null
  seq_no_in?: number[]
  seq_no_not_in?: number[]
  seq_no_lt?: number | null
  seq_no_lte?: number | null
  seq_no_gt?: number | null
  seq_no_gte?: number | null
  name?: string | null
  name_not?: string | null
  name_in?: string[]
  name_not_in?: string[]
  name_lt?: string | null
  name_lte?: string | null
  name_gt?: string | null
  name_gte?: string | null
  name_contains?: string | null
  name_not_contains?: string | null
  name_starts_with?: string | null
  name_not_starts_with?: string | null
  name_ends_with?: string | null
  name_not_ends_with?: string | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  AND?: CourseScalarWhereInput[]
  OR?: CourseScalarWhereInput[]
  NOT?: CourseScalarWhereInput[]
}
export type CourseScalarWhereInputInputObject =
  | Extract<keyof CourseScalarWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'seq_no', alias?: string  } 
  | { name: 'seq_no_not', alias?: string  } 
  | { name: 'seq_no_in', alias?: string  } 
  | { name: 'seq_no_not_in', alias?: string  } 
  | { name: 'seq_no_lt', alias?: string  } 
  | { name: 'seq_no_lte', alias?: string  } 
  | { name: 'seq_no_gt', alias?: string  } 
  | { name: 'seq_no_gte', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'name_not', alias?: string  } 
  | { name: 'name_in', alias?: string  } 
  | { name: 'name_not_in', alias?: string  } 
  | { name: 'name_lt', alias?: string  } 
  | { name: 'name_lte', alias?: string  } 
  | { name: 'name_gt', alias?: string  } 
  | { name: 'name_gte', alias?: string  } 
  | { name: 'name_contains', alias?: string  } 
  | { name: 'name_not_contains', alias?: string  } 
  | { name: 'name_starts_with', alias?: string  } 
  | { name: 'name_not_starts_with', alias?: string  } 
  | { name: 'name_ends_with', alias?: string  } 
  | { name: 'name_not_ends_with', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface CourseUpdateManyWithWhereNestedInput {
  where?: CourseScalarWhereInput
  data?: CourseUpdateManyDataInput
}
export type CourseUpdateManyWithWhereNestedInputInputObject =
  | Extract<keyof CourseUpdateManyWithWhereNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface CourseUpdateManyDataInput {
  seq_no?: number | null
  name?: string | null
}
export type CourseUpdateManyDataInputInputObject =
  | Extract<keyof CourseUpdateManyDataInput, string>
  | { name: 'seq_no', alias?: string  } 
  | { name: 'name', alias?: string  } 
  
export interface ClubUpdateManyMutationInput {
  id_number?: number | null
  name?: string | null
  name_origin?: string | null
  sw_lat?: string | null
  sw_lng?: string | null
  ne_lat?: string | null
  ne_lng?: string | null
  address1?: string | null
  address2?: string | null
}
export type ClubUpdateManyMutationInputInputObject =
  | Extract<keyof ClubUpdateManyMutationInput, string>
  | { name: 'id_number', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'name_origin', alias?: string  } 
  | { name: 'sw_lat', alias?: string  } 
  | { name: 'sw_lng', alias?: string  } 
  | { name: 'ne_lat', alias?: string  } 
  | { name: 'ne_lng', alias?: string  } 
  | { name: 'address1', alias?: string  } 
  | { name: 'address2', alias?: string  } 
  
export interface CourseCreateInput {
  id?: string | null
  club?: ClubCreateOneWithoutCourseInput
  seq_no?: number | null
  name?: string
}
export type CourseCreateInputInputObject =
  | Extract<keyof CourseCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'club', alias?: string  } 
  | { name: 'seq_no', alias?: string  } 
  | { name: 'name', alias?: string  } 
  
export interface ClubCreateOneWithoutCourseInput {
  create?: ClubCreateWithoutCourseInput | null
  connect?: ClubWhereUniqueInput | null
}
export type ClubCreateOneWithoutCourseInputInputObject =
  | Extract<keyof ClubCreateOneWithoutCourseInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface ClubCreateWithoutCourseInput {
  id?: string | null
  id_number?: number | null
  name?: string | null
  name_origin?: string | null
  sw_lat?: string | null
  sw_lng?: string | null
  ne_lat?: string | null
  ne_lng?: string | null
  address1?: string | null
  address2?: string | null
  contry?: CountryCreateOneInput | null
}
export type ClubCreateWithoutCourseInputInputObject =
  | Extract<keyof ClubCreateWithoutCourseInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_number', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'name_origin', alias?: string  } 
  | { name: 'sw_lat', alias?: string  } 
  | { name: 'sw_lng', alias?: string  } 
  | { name: 'ne_lat', alias?: string  } 
  | { name: 'ne_lng', alias?: string  } 
  | { name: 'address1', alias?: string  } 
  | { name: 'address2', alias?: string  } 
  | { name: 'contry', alias?: string  } 
  
export interface CourseUpdateInput {
  club?: ClubUpdateOneRequiredWithoutCourseInput | null
  seq_no?: number | null
  name?: string | null
}
export type CourseUpdateInputInputObject =
  | Extract<keyof CourseUpdateInput, string>
  | { name: 'club', alias?: string  } 
  | { name: 'seq_no', alias?: string  } 
  | { name: 'name', alias?: string  } 
  
export interface ClubUpdateOneRequiredWithoutCourseInput {
  create?: ClubCreateWithoutCourseInput | null
  update?: ClubUpdateWithoutCourseDataInput | null
  upsert?: ClubUpsertWithoutCourseInput | null
  connect?: ClubWhereUniqueInput | null
}
export type ClubUpdateOneRequiredWithoutCourseInputInputObject =
  | Extract<keyof ClubUpdateOneRequiredWithoutCourseInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface ClubUpdateWithoutCourseDataInput {
  id_number?: number | null
  name?: string | null
  name_origin?: string | null
  sw_lat?: string | null
  sw_lng?: string | null
  ne_lat?: string | null
  ne_lng?: string | null
  address1?: string | null
  address2?: string | null
  contry?: CountryUpdateOneInput | null
}
export type ClubUpdateWithoutCourseDataInputInputObject =
  | Extract<keyof ClubUpdateWithoutCourseDataInput, string>
  | { name: 'id_number', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'name_origin', alias?: string  } 
  | { name: 'sw_lat', alias?: string  } 
  | { name: 'sw_lng', alias?: string  } 
  | { name: 'ne_lat', alias?: string  } 
  | { name: 'ne_lng', alias?: string  } 
  | { name: 'address1', alias?: string  } 
  | { name: 'address2', alias?: string  } 
  | { name: 'contry', alias?: string  } 
  
export interface ClubUpsertWithoutCourseInput {
  update?: ClubUpdateWithoutCourseDataInput
  create?: ClubCreateWithoutCourseInput
}
export type ClubUpsertWithoutCourseInputInputObject =
  | Extract<keyof ClubUpsertWithoutCourseInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface CourseUpdateManyMutationInput {
  seq_no?: number | null
  name?: string | null
}
export type CourseUpdateManyMutationInputInputObject =
  | Extract<keyof CourseUpdateManyMutationInput, string>
  | { name: 'seq_no', alias?: string  } 
  | { name: 'name', alias?: string  } 
  
export interface HoleCreateInput {
  id?: string | null
  seq_no?: number | null
  course?: CourseCreateOneInput | null
}
export type HoleCreateInputInputObject =
  | Extract<keyof HoleCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'seq_no', alias?: string  } 
  | { name: 'course', alias?: string  } 
  
export interface CourseCreateOneInput {
  create?: CourseCreateInput | null
  connect?: CourseWhereUniqueInput | null
}
export type CourseCreateOneInputInputObject =
  | Extract<keyof CourseCreateOneInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface HoleUpdateInput {
  seq_no?: number | null
  course?: CourseUpdateOneInput | null
}
export type HoleUpdateInputInputObject =
  | Extract<keyof HoleUpdateInput, string>
  | { name: 'seq_no', alias?: string  } 
  | { name: 'course', alias?: string  } 
  
export interface CourseUpdateOneInput {
  create?: CourseCreateInput | null
  update?: CourseUpdateDataInput | null
  upsert?: CourseUpsertNestedInput | null
  delete?: boolean | null
  disconnect?: boolean | null
  connect?: CourseWhereUniqueInput | null
}
export type CourseUpdateOneInputInputObject =
  | Extract<keyof CourseUpdateOneInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface CourseUpdateDataInput {
  club?: ClubUpdateOneRequiredWithoutCourseInput | null
  seq_no?: number | null
  name?: string | null
}
export type CourseUpdateDataInputInputObject =
  | Extract<keyof CourseUpdateDataInput, string>
  | { name: 'club', alias?: string  } 
  | { name: 'seq_no', alias?: string  } 
  | { name: 'name', alias?: string  } 
  
export interface CourseUpsertNestedInput {
  update?: CourseUpdateDataInput
  create?: CourseCreateInput
}
export type CourseUpsertNestedInputInputObject =
  | Extract<keyof CourseUpsertNestedInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface HoleUpdateManyMutationInput {
  seq_no?: number | null
}
export type HoleUpdateManyMutationInputInputObject =
  | Extract<keyof HoleUpdateManyMutationInput, string>
  | { name: 'seq_no', alias?: string  } 
  
export interface GeodataCreateInput {
  id?: string | null
  course?: CourseCreateOneInput | null
  lat?: string | null
  lng?: string | null
  alt?: string | null
}
export type GeodataCreateInputInputObject =
  | Extract<keyof GeodataCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'course', alias?: string  } 
  | { name: 'lat', alias?: string  } 
  | { name: 'lng', alias?: string  } 
  | { name: 'alt', alias?: string  } 
  
export interface GeodataUpdateInput {
  course?: CourseUpdateOneInput | null
  lat?: string | null
  lng?: string | null
  alt?: string | null
}
export type GeodataUpdateInputInputObject =
  | Extract<keyof GeodataUpdateInput, string>
  | { name: 'course', alias?: string  } 
  | { name: 'lat', alias?: string  } 
  | { name: 'lng', alias?: string  } 
  | { name: 'alt', alias?: string  } 
  
export interface GeodataUpdateManyMutationInput {
  lat?: string | null
  lng?: string | null
  alt?: string | null
}
export type GeodataUpdateManyMutationInputInputObject =
  | Extract<keyof GeodataUpdateManyMutationInput, string>
  | { name: 'lat', alias?: string  } 
  | { name: 'lng', alias?: string  } 
  | { name: 'alt', alias?: string  } 
  
export interface UserSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: UserWhereInput | null
  AND?: UserSubscriptionWhereInput[]
  OR?: UserSubscriptionWhereInput[]
  NOT?: UserSubscriptionWhereInput[]
}
export type UserSubscriptionWhereInputInputObject =
  | Extract<keyof UserSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface CountrySubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: CountryWhereInput | null
  AND?: CountrySubscriptionWhereInput[]
  OR?: CountrySubscriptionWhereInput[]
  NOT?: CountrySubscriptionWhereInput[]
}
export type CountrySubscriptionWhereInputInputObject =
  | Extract<keyof CountrySubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface ClubSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: ClubWhereInput | null
  AND?: ClubSubscriptionWhereInput[]
  OR?: ClubSubscriptionWhereInput[]
  NOT?: ClubSubscriptionWhereInput[]
}
export type ClubSubscriptionWhereInputInputObject =
  | Extract<keyof ClubSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface CourseSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: CourseWhereInput | null
  AND?: CourseSubscriptionWhereInput[]
  OR?: CourseSubscriptionWhereInput[]
  NOT?: CourseSubscriptionWhereInput[]
}
export type CourseSubscriptionWhereInputInputObject =
  | Extract<keyof CourseSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface HoleSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: HoleWhereInput | null
  AND?: HoleSubscriptionWhereInput[]
  OR?: HoleSubscriptionWhereInput[]
  NOT?: HoleSubscriptionWhereInput[]
}
export type HoleSubscriptionWhereInputInputObject =
  | Extract<keyof HoleSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface GeodataSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: GeodataWhereInput | null
  AND?: GeodataSubscriptionWhereInput[]
  OR?: GeodataSubscriptionWhereInput[]
  NOT?: GeodataSubscriptionWhereInput[]
}
export type GeodataSubscriptionWhereInputInputObject =
  | Extract<keyof GeodataSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  

export type UserOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'email_ASC'
  | 'email_DESC'
  | 'name_ASC'
  | 'name_DESC'
  | 'password_ASC'
  | 'password_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type CountryOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'id_number_ASC'
  | 'id_number_DESC'
  | 'iso_numeric_ASC'
  | 'iso_numeric_DESC'
  | 'iso_alpha_2_ASC'
  | 'iso_alpha_2_DESC'
  | 'iso_alpha_3_ASC'
  | 'iso_alpha_3_DESC'
  | 'name_en_ASC'
  | 'name_en_DESC'
  | 'name_kr_ASC'
  | 'name_kr_DESC'
  | 'dial_number_ASC'
  | 'dial_number_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type CourseOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'seq_no_ASC'
  | 'seq_no_DESC'
  | 'name_ASC'
  | 'name_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type ClubOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'id_number_ASC'
  | 'id_number_DESC'
  | 'name_ASC'
  | 'name_DESC'
  | 'name_origin_ASC'
  | 'name_origin_DESC'
  | 'sw_lat_ASC'
  | 'sw_lat_DESC'
  | 'sw_lng_ASC'
  | 'sw_lng_DESC'
  | 'ne_lat_ASC'
  | 'ne_lat_DESC'
  | 'ne_lng_ASC'
  | 'ne_lng_DESC'
  | 'address1_ASC'
  | 'address1_DESC'
  | 'address2_ASC'
  | 'address2_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type HoleOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'seq_no_ASC'
  | 'seq_no_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type GeodataOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'lat_ASC'
  | 'lat_DESC'
  | 'lng_ASC'
  | 'lng_DESC'
  | 'alt_ASC'
  | 'alt_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type MutationTypeValues =
  | 'CREATED'
  | 'UPDATED'
  | 'DELETED'
  
  