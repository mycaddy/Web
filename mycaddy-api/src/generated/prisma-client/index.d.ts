// Code generated by Prisma (prisma@1.34.0). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  club: (where?: ClubWhereInput) => Promise<boolean>;
  country: (where?: CountryWhereInput) => Promise<boolean>;
  course: (where?: CourseWhereInput) => Promise<boolean>;
  geodata: (where?: GeodataWhereInput) => Promise<boolean>;
  hole: (where?: HoleWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  club: (where: ClubWhereUniqueInput) => ClubNullablePromise;
  clubs: (args?: {
    where?: ClubWhereInput;
    orderBy?: ClubOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Club>;
  clubsConnection: (args?: {
    where?: ClubWhereInput;
    orderBy?: ClubOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ClubConnectionPromise;
  country: (where: CountryWhereUniqueInput) => CountryNullablePromise;
  countries: (args?: {
    where?: CountryWhereInput;
    orderBy?: CountryOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Country>;
  countriesConnection: (args?: {
    where?: CountryWhereInput;
    orderBy?: CountryOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => CountryConnectionPromise;
  course: (where: CourseWhereUniqueInput) => CourseNullablePromise;
  courses: (args?: {
    where?: CourseWhereInput;
    orderBy?: CourseOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Course>;
  coursesConnection: (args?: {
    where?: CourseWhereInput;
    orderBy?: CourseOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => CourseConnectionPromise;
  geodata: (where: GeodataWhereUniqueInput) => GeodataNullablePromise;
  geodatas: (args?: {
    where?: GeodataWhereInput;
    orderBy?: GeodataOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Geodata>;
  geodatasConnection: (args?: {
    where?: GeodataWhereInput;
    orderBy?: GeodataOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => GeodataConnectionPromise;
  hole: (where: HoleWhereUniqueInput) => HoleNullablePromise;
  holes: (args?: {
    where?: HoleWhereInput;
    orderBy?: HoleOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Hole>;
  holesConnection: (args?: {
    where?: HoleWhereInput;
    orderBy?: HoleOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => HoleConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserNullablePromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createClub: (data: ClubCreateInput) => ClubPromise;
  updateClub: (args: {
    data: ClubUpdateInput;
    where: ClubWhereUniqueInput;
  }) => ClubPromise;
  updateManyClubs: (args: {
    data: ClubUpdateManyMutationInput;
    where?: ClubWhereInput;
  }) => BatchPayloadPromise;
  upsertClub: (args: {
    where: ClubWhereUniqueInput;
    create: ClubCreateInput;
    update: ClubUpdateInput;
  }) => ClubPromise;
  deleteClub: (where: ClubWhereUniqueInput) => ClubPromise;
  deleteManyClubs: (where?: ClubWhereInput) => BatchPayloadPromise;
  createCountry: (data: CountryCreateInput) => CountryPromise;
  updateCountry: (args: {
    data: CountryUpdateInput;
    where: CountryWhereUniqueInput;
  }) => CountryPromise;
  updateManyCountries: (args: {
    data: CountryUpdateManyMutationInput;
    where?: CountryWhereInput;
  }) => BatchPayloadPromise;
  upsertCountry: (args: {
    where: CountryWhereUniqueInput;
    create: CountryCreateInput;
    update: CountryUpdateInput;
  }) => CountryPromise;
  deleteCountry: (where: CountryWhereUniqueInput) => CountryPromise;
  deleteManyCountries: (where?: CountryWhereInput) => BatchPayloadPromise;
  createCourse: (data: CourseCreateInput) => CoursePromise;
  updateCourse: (args: {
    data: CourseUpdateInput;
    where: CourseWhereUniqueInput;
  }) => CoursePromise;
  updateManyCourses: (args: {
    data: CourseUpdateManyMutationInput;
    where?: CourseWhereInput;
  }) => BatchPayloadPromise;
  upsertCourse: (args: {
    where: CourseWhereUniqueInput;
    create: CourseCreateInput;
    update: CourseUpdateInput;
  }) => CoursePromise;
  deleteCourse: (where: CourseWhereUniqueInput) => CoursePromise;
  deleteManyCourses: (where?: CourseWhereInput) => BatchPayloadPromise;
  createGeodata: (data: GeodataCreateInput) => GeodataPromise;
  updateGeodata: (args: {
    data: GeodataUpdateInput;
    where: GeodataWhereUniqueInput;
  }) => GeodataPromise;
  updateManyGeodatas: (args: {
    data: GeodataUpdateManyMutationInput;
    where?: GeodataWhereInput;
  }) => BatchPayloadPromise;
  upsertGeodata: (args: {
    where: GeodataWhereUniqueInput;
    create: GeodataCreateInput;
    update: GeodataUpdateInput;
  }) => GeodataPromise;
  deleteGeodata: (where: GeodataWhereUniqueInput) => GeodataPromise;
  deleteManyGeodatas: (where?: GeodataWhereInput) => BatchPayloadPromise;
  createHole: (data: HoleCreateInput) => HolePromise;
  updateHole: (args: {
    data: HoleUpdateInput;
    where: HoleWhereUniqueInput;
  }) => HolePromise;
  updateManyHoles: (args: {
    data: HoleUpdateManyMutationInput;
    where?: HoleWhereInput;
  }) => BatchPayloadPromise;
  upsertHole: (args: {
    where: HoleWhereUniqueInput;
    create: HoleCreateInput;
    update: HoleUpdateInput;
  }) => HolePromise;
  deleteHole: (where: HoleWhereUniqueInput) => HolePromise;
  deleteManyHoles: (where?: HoleWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  club: (
    where?: ClubSubscriptionWhereInput
  ) => ClubSubscriptionPayloadSubscription;
  country: (
    where?: CountrySubscriptionWhereInput
  ) => CountrySubscriptionPayloadSubscription;
  course: (
    where?: CourseSubscriptionWhereInput
  ) => CourseSubscriptionPayloadSubscription;
  geodata: (
    where?: GeodataSubscriptionWhereInput
  ) => GeodataSubscriptionPayloadSubscription;
  hole: (
    where?: HoleSubscriptionWhereInput
  ) => HoleSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type CourseOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "seq_no_ASC"
  | "seq_no_DESC"
  | "name_ASC"
  | "name_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type ClubOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "id_number_ASC"
  | "id_number_DESC"
  | "name_ASC"
  | "name_DESC"
  | "name_origin_ASC"
  | "name_origin_DESC"
  | "sw_lat_ASC"
  | "sw_lat_DESC"
  | "sw_lng_ASC"
  | "sw_lng_DESC"
  | "ne_lat_ASC"
  | "ne_lat_DESC"
  | "ne_lng_ASC"
  | "ne_lng_DESC"
  | "address1_ASC"
  | "address1_DESC"
  | "address2_ASC"
  | "address2_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type CountryOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "id_number_ASC"
  | "id_number_DESC"
  | "iso_numeric_ASC"
  | "iso_numeric_DESC"
  | "iso_alpha_2_ASC"
  | "iso_alpha_2_DESC"
  | "iso_alpha_3_ASC"
  | "iso_alpha_3_DESC"
  | "name_en_ASC"
  | "name_en_DESC"
  | "name_kr_ASC"
  | "name_kr_DESC"
  | "dial_number_ASC"
  | "dial_number_DESC";

export type GeodataOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "lat_ASC"
  | "lat_DESC"
  | "lng_ASC"
  | "lng_DESC"
  | "alt_ASC"
  | "alt_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type HoleOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "seq_no_ASC"
  | "seq_no_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "email_ASC"
  | "email_DESC"
  | "name_ASC"
  | "name_DESC"
  | "password_ASC"
  | "password_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export interface CountryUpdateOneInput {
  create?: Maybe<CountryCreateInput>;
  update?: Maybe<CountryUpdateDataInput>;
  upsert?: Maybe<CountryUpsertNestedInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<CountryWhereUniqueInput>;
}

export type ClubWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  id_number?: Maybe<Int>;
}>;

export interface CourseUpdateManyMutationInput {
  seq_no?: Maybe<Int>;
  name?: Maybe<String>;
}

export interface CountryUpdateInput {
  id_number?: Maybe<Int>;
  iso_numeric?: Maybe<Int>;
  iso_alpha_2?: Maybe<String>;
  iso_alpha_3?: Maybe<String>;
  name_en?: Maybe<String>;
  name_kr?: Maybe<String>;
  dial_number?: Maybe<String>;
}

export interface ClubUpsertWithoutCourseInput {
  update: ClubUpdateWithoutCourseDataInput;
  create: ClubCreateWithoutCourseInput;
}

export interface CourseUpdateWithWhereUniqueWithoutClubInput {
  where: CourseWhereUniqueInput;
  data: CourseUpdateWithoutClubDataInput;
}

export interface ClubUpdateWithoutCourseDataInput {
  id_number?: Maybe<Int>;
  name?: Maybe<String>;
  name_origin?: Maybe<String>;
  sw_lat?: Maybe<String>;
  sw_lng?: Maybe<String>;
  ne_lat?: Maybe<String>;
  ne_lng?: Maybe<String>;
  address1?: Maybe<String>;
  address2?: Maybe<String>;
  contry?: Maybe<CountryUpdateOneInput>;
}

export interface ClubWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  id_number?: Maybe<Int>;
  id_number_not?: Maybe<Int>;
  id_number_in?: Maybe<Int[] | Int>;
  id_number_not_in?: Maybe<Int[] | Int>;
  id_number_lt?: Maybe<Int>;
  id_number_lte?: Maybe<Int>;
  id_number_gt?: Maybe<Int>;
  id_number_gte?: Maybe<Int>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  name_origin?: Maybe<String>;
  name_origin_not?: Maybe<String>;
  name_origin_in?: Maybe<String[] | String>;
  name_origin_not_in?: Maybe<String[] | String>;
  name_origin_lt?: Maybe<String>;
  name_origin_lte?: Maybe<String>;
  name_origin_gt?: Maybe<String>;
  name_origin_gte?: Maybe<String>;
  name_origin_contains?: Maybe<String>;
  name_origin_not_contains?: Maybe<String>;
  name_origin_starts_with?: Maybe<String>;
  name_origin_not_starts_with?: Maybe<String>;
  name_origin_ends_with?: Maybe<String>;
  name_origin_not_ends_with?: Maybe<String>;
  sw_lat?: Maybe<String>;
  sw_lat_not?: Maybe<String>;
  sw_lat_in?: Maybe<String[] | String>;
  sw_lat_not_in?: Maybe<String[] | String>;
  sw_lat_lt?: Maybe<String>;
  sw_lat_lte?: Maybe<String>;
  sw_lat_gt?: Maybe<String>;
  sw_lat_gte?: Maybe<String>;
  sw_lat_contains?: Maybe<String>;
  sw_lat_not_contains?: Maybe<String>;
  sw_lat_starts_with?: Maybe<String>;
  sw_lat_not_starts_with?: Maybe<String>;
  sw_lat_ends_with?: Maybe<String>;
  sw_lat_not_ends_with?: Maybe<String>;
  sw_lng?: Maybe<String>;
  sw_lng_not?: Maybe<String>;
  sw_lng_in?: Maybe<String[] | String>;
  sw_lng_not_in?: Maybe<String[] | String>;
  sw_lng_lt?: Maybe<String>;
  sw_lng_lte?: Maybe<String>;
  sw_lng_gt?: Maybe<String>;
  sw_lng_gte?: Maybe<String>;
  sw_lng_contains?: Maybe<String>;
  sw_lng_not_contains?: Maybe<String>;
  sw_lng_starts_with?: Maybe<String>;
  sw_lng_not_starts_with?: Maybe<String>;
  sw_lng_ends_with?: Maybe<String>;
  sw_lng_not_ends_with?: Maybe<String>;
  ne_lat?: Maybe<String>;
  ne_lat_not?: Maybe<String>;
  ne_lat_in?: Maybe<String[] | String>;
  ne_lat_not_in?: Maybe<String[] | String>;
  ne_lat_lt?: Maybe<String>;
  ne_lat_lte?: Maybe<String>;
  ne_lat_gt?: Maybe<String>;
  ne_lat_gte?: Maybe<String>;
  ne_lat_contains?: Maybe<String>;
  ne_lat_not_contains?: Maybe<String>;
  ne_lat_starts_with?: Maybe<String>;
  ne_lat_not_starts_with?: Maybe<String>;
  ne_lat_ends_with?: Maybe<String>;
  ne_lat_not_ends_with?: Maybe<String>;
  ne_lng?: Maybe<String>;
  ne_lng_not?: Maybe<String>;
  ne_lng_in?: Maybe<String[] | String>;
  ne_lng_not_in?: Maybe<String[] | String>;
  ne_lng_lt?: Maybe<String>;
  ne_lng_lte?: Maybe<String>;
  ne_lng_gt?: Maybe<String>;
  ne_lng_gte?: Maybe<String>;
  ne_lng_contains?: Maybe<String>;
  ne_lng_not_contains?: Maybe<String>;
  ne_lng_starts_with?: Maybe<String>;
  ne_lng_not_starts_with?: Maybe<String>;
  ne_lng_ends_with?: Maybe<String>;
  ne_lng_not_ends_with?: Maybe<String>;
  address1?: Maybe<String>;
  address1_not?: Maybe<String>;
  address1_in?: Maybe<String[] | String>;
  address1_not_in?: Maybe<String[] | String>;
  address1_lt?: Maybe<String>;
  address1_lte?: Maybe<String>;
  address1_gt?: Maybe<String>;
  address1_gte?: Maybe<String>;
  address1_contains?: Maybe<String>;
  address1_not_contains?: Maybe<String>;
  address1_starts_with?: Maybe<String>;
  address1_not_starts_with?: Maybe<String>;
  address1_ends_with?: Maybe<String>;
  address1_not_ends_with?: Maybe<String>;
  address2?: Maybe<String>;
  address2_not?: Maybe<String>;
  address2_in?: Maybe<String[] | String>;
  address2_not_in?: Maybe<String[] | String>;
  address2_lt?: Maybe<String>;
  address2_lte?: Maybe<String>;
  address2_gt?: Maybe<String>;
  address2_gte?: Maybe<String>;
  address2_contains?: Maybe<String>;
  address2_not_contains?: Maybe<String>;
  address2_starts_with?: Maybe<String>;
  address2_not_starts_with?: Maybe<String>;
  address2_ends_with?: Maybe<String>;
  address2_not_ends_with?: Maybe<String>;
  contry?: Maybe<CountryWhereInput>;
  course_every?: Maybe<CourseWhereInput>;
  course_some?: Maybe<CourseWhereInput>;
  course_none?: Maybe<CourseWhereInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<ClubWhereInput[] | ClubWhereInput>;
  OR?: Maybe<ClubWhereInput[] | ClubWhereInput>;
  NOT?: Maybe<ClubWhereInput[] | ClubWhereInput>;
}

export type UserWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  email?: Maybe<String>;
}>;

export interface GeodataSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<GeodataWhereInput>;
  AND?: Maybe<GeodataSubscriptionWhereInput[] | GeodataSubscriptionWhereInput>;
  OR?: Maybe<GeodataSubscriptionWhereInput[] | GeodataSubscriptionWhereInput>;
  NOT?: Maybe<GeodataSubscriptionWhereInput[] | GeodataSubscriptionWhereInput>;
}

export interface ClubUpdateOneRequiredWithoutCourseInput {
  create?: Maybe<ClubCreateWithoutCourseInput>;
  update?: Maybe<ClubUpdateWithoutCourseDataInput>;
  upsert?: Maybe<ClubUpsertWithoutCourseInput>;
  connect?: Maybe<ClubWhereUniqueInput>;
}

export interface CountrySubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<CountryWhereInput>;
  AND?: Maybe<CountrySubscriptionWhereInput[] | CountrySubscriptionWhereInput>;
  OR?: Maybe<CountrySubscriptionWhereInput[] | CountrySubscriptionWhereInput>;
  NOT?: Maybe<CountrySubscriptionWhereInput[] | CountrySubscriptionWhereInput>;
}

export interface UserWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  password?: Maybe<String>;
  password_not?: Maybe<String>;
  password_in?: Maybe<String[] | String>;
  password_not_in?: Maybe<String[] | String>;
  password_lt?: Maybe<String>;
  password_lte?: Maybe<String>;
  password_gt?: Maybe<String>;
  password_gte?: Maybe<String>;
  password_contains?: Maybe<String>;
  password_not_contains?: Maybe<String>;
  password_starts_with?: Maybe<String>;
  password_not_starts_with?: Maybe<String>;
  password_ends_with?: Maybe<String>;
  password_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<UserWhereInput[] | UserWhereInput>;
  OR?: Maybe<UserWhereInput[] | UserWhereInput>;
  NOT?: Maybe<UserWhereInput[] | UserWhereInput>;
}

export type CountryWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  id_number?: Maybe<Int>;
  iso_numeric?: Maybe<Int>;
}>;

export interface CourseUpdateInput {
  club?: Maybe<ClubUpdateOneRequiredWithoutCourseInput>;
  seq_no?: Maybe<Int>;
  name?: Maybe<String>;
}

export interface UserUpdateManyMutationInput {
  email?: Maybe<String>;
  name?: Maybe<String>;
  password?: Maybe<String>;
}

export interface ClubCreateWithoutCourseInput {
  id?: Maybe<ID_Input>;
  id_number?: Maybe<Int>;
  name?: Maybe<String>;
  name_origin?: Maybe<String>;
  sw_lat?: Maybe<String>;
  sw_lng?: Maybe<String>;
  ne_lat?: Maybe<String>;
  ne_lng?: Maybe<String>;
  address1?: Maybe<String>;
  address2?: Maybe<String>;
  contry?: Maybe<CountryCreateOneInput>;
}

export interface UserCreateInput {
  id?: Maybe<ID_Input>;
  email?: Maybe<String>;
  name: String;
  password: String;
}

export interface ClubCreateOneWithoutCourseInput {
  create?: Maybe<ClubCreateWithoutCourseInput>;
  connect?: Maybe<ClubWhereUniqueInput>;
}

export interface HoleUpdateManyMutationInput {
  seq_no?: Maybe<Int>;
}

export interface CourseCreateInput {
  id?: Maybe<ID_Input>;
  club: ClubCreateOneWithoutCourseInput;
  seq_no?: Maybe<Int>;
  name: String;
}

export interface HoleCreateInput {
  id?: Maybe<ID_Input>;
  seq_no?: Maybe<Int>;
  course?: Maybe<CourseCreateOneInput>;
}

export interface GeodataUpdateManyMutationInput {
  lat?: Maybe<String>;
  lng?: Maybe<String>;
  alt?: Maybe<String>;
}

export interface CourseUpsertNestedInput {
  update: CourseUpdateDataInput;
  create: CourseCreateInput;
}

export interface ClubCreateInput {
  id?: Maybe<ID_Input>;
  id_number?: Maybe<Int>;
  name?: Maybe<String>;
  name_origin?: Maybe<String>;
  sw_lat?: Maybe<String>;
  sw_lng?: Maybe<String>;
  ne_lat?: Maybe<String>;
  ne_lng?: Maybe<String>;
  address1?: Maybe<String>;
  address2?: Maybe<String>;
  contry?: Maybe<CountryCreateOneInput>;
  course?: Maybe<CourseCreateManyWithoutClubInput>;
}

export interface CourseUpdateOneInput {
  create?: Maybe<CourseCreateInput>;
  update?: Maybe<CourseUpdateDataInput>;
  upsert?: Maybe<CourseUpsertNestedInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<CourseWhereUniqueInput>;
}

export interface CountryCreateOneInput {
  create?: Maybe<CountryCreateInput>;
  connect?: Maybe<CountryWhereUniqueInput>;
}

export type HoleWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface CountryCreateInput {
  id?: Maybe<ID_Input>;
  id_number?: Maybe<Int>;
  iso_numeric?: Maybe<Int>;
  iso_alpha_2?: Maybe<String>;
  iso_alpha_3?: Maybe<String>;
  name_en: String;
  name_kr?: Maybe<String>;
  dial_number?: Maybe<String>;
}

export interface HoleWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  seq_no?: Maybe<Int>;
  seq_no_not?: Maybe<Int>;
  seq_no_in?: Maybe<Int[] | Int>;
  seq_no_not_in?: Maybe<Int[] | Int>;
  seq_no_lt?: Maybe<Int>;
  seq_no_lte?: Maybe<Int>;
  seq_no_gt?: Maybe<Int>;
  seq_no_gte?: Maybe<Int>;
  course?: Maybe<CourseWhereInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<HoleWhereInput[] | HoleWhereInput>;
  OR?: Maybe<HoleWhereInput[] | HoleWhereInput>;
  NOT?: Maybe<HoleWhereInput[] | HoleWhereInput>;
}

export interface CourseCreateManyWithoutClubInput {
  create?: Maybe<CourseCreateWithoutClubInput[] | CourseCreateWithoutClubInput>;
  connect?: Maybe<CourseWhereUniqueInput[] | CourseWhereUniqueInput>;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserWhereInput>;
  AND?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  OR?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  NOT?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
}

export interface CourseCreateWithoutClubInput {
  id?: Maybe<ID_Input>;
  seq_no?: Maybe<Int>;
  name: String;
}

export interface CourseSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<CourseWhereInput>;
  AND?: Maybe<CourseSubscriptionWhereInput[] | CourseSubscriptionWhereInput>;
  OR?: Maybe<CourseSubscriptionWhereInput[] | CourseSubscriptionWhereInput>;
  NOT?: Maybe<CourseSubscriptionWhereInput[] | CourseSubscriptionWhereInput>;
}

export interface ClubUpdateInput {
  id_number?: Maybe<Int>;
  name?: Maybe<String>;
  name_origin?: Maybe<String>;
  sw_lat?: Maybe<String>;
  sw_lng?: Maybe<String>;
  ne_lat?: Maybe<String>;
  ne_lng?: Maybe<String>;
  address1?: Maybe<String>;
  address2?: Maybe<String>;
  contry?: Maybe<CountryUpdateOneInput>;
  course?: Maybe<CourseUpdateManyWithoutClubInput>;
}

export interface CourseWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  club?: Maybe<ClubWhereInput>;
  seq_no?: Maybe<Int>;
  seq_no_not?: Maybe<Int>;
  seq_no_in?: Maybe<Int[] | Int>;
  seq_no_not_in?: Maybe<Int[] | Int>;
  seq_no_lt?: Maybe<Int>;
  seq_no_lte?: Maybe<Int>;
  seq_no_gt?: Maybe<Int>;
  seq_no_gte?: Maybe<Int>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<CourseWhereInput[] | CourseWhereInput>;
  OR?: Maybe<CourseWhereInput[] | CourseWhereInput>;
  NOT?: Maybe<CourseWhereInput[] | CourseWhereInput>;
}

export interface CountryUpdateManyMutationInput {
  id_number?: Maybe<Int>;
  iso_numeric?: Maybe<Int>;
  iso_alpha_2?: Maybe<String>;
  iso_alpha_3?: Maybe<String>;
  name_en?: Maybe<String>;
  name_kr?: Maybe<String>;
  dial_number?: Maybe<String>;
}

export type CourseWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface CountryUpdateDataInput {
  id_number?: Maybe<Int>;
  iso_numeric?: Maybe<Int>;
  iso_alpha_2?: Maybe<String>;
  iso_alpha_3?: Maybe<String>;
  name_en?: Maybe<String>;
  name_kr?: Maybe<String>;
  dial_number?: Maybe<String>;
}

export type GeodataWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface CountryUpsertNestedInput {
  update: CountryUpdateDataInput;
  create: CountryCreateInput;
}

export interface CourseUpdateDataInput {
  club?: Maybe<ClubUpdateOneRequiredWithoutCourseInput>;
  seq_no?: Maybe<Int>;
  name?: Maybe<String>;
}

export interface CourseUpdateManyWithoutClubInput {
  create?: Maybe<CourseCreateWithoutClubInput[] | CourseCreateWithoutClubInput>;
  delete?: Maybe<CourseWhereUniqueInput[] | CourseWhereUniqueInput>;
  connect?: Maybe<CourseWhereUniqueInput[] | CourseWhereUniqueInput>;
  set?: Maybe<CourseWhereUniqueInput[] | CourseWhereUniqueInput>;
  disconnect?: Maybe<CourseWhereUniqueInput[] | CourseWhereUniqueInput>;
  update?: Maybe<
    | CourseUpdateWithWhereUniqueWithoutClubInput[]
    | CourseUpdateWithWhereUniqueWithoutClubInput
  >;
  upsert?: Maybe<
    | CourseUpsertWithWhereUniqueWithoutClubInput[]
    | CourseUpsertWithWhereUniqueWithoutClubInput
  >;
  deleteMany?: Maybe<CourseScalarWhereInput[] | CourseScalarWhereInput>;
  updateMany?: Maybe<
    | CourseUpdateManyWithWhereNestedInput[]
    | CourseUpdateManyWithWhereNestedInput
  >;
}

export interface CourseCreateOneInput {
  create?: Maybe<CourseCreateInput>;
  connect?: Maybe<CourseWhereUniqueInput>;
}

export interface CountryWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  id_number?: Maybe<Int>;
  id_number_not?: Maybe<Int>;
  id_number_in?: Maybe<Int[] | Int>;
  id_number_not_in?: Maybe<Int[] | Int>;
  id_number_lt?: Maybe<Int>;
  id_number_lte?: Maybe<Int>;
  id_number_gt?: Maybe<Int>;
  id_number_gte?: Maybe<Int>;
  iso_numeric?: Maybe<Int>;
  iso_numeric_not?: Maybe<Int>;
  iso_numeric_in?: Maybe<Int[] | Int>;
  iso_numeric_not_in?: Maybe<Int[] | Int>;
  iso_numeric_lt?: Maybe<Int>;
  iso_numeric_lte?: Maybe<Int>;
  iso_numeric_gt?: Maybe<Int>;
  iso_numeric_gte?: Maybe<Int>;
  iso_alpha_2?: Maybe<String>;
  iso_alpha_2_not?: Maybe<String>;
  iso_alpha_2_in?: Maybe<String[] | String>;
  iso_alpha_2_not_in?: Maybe<String[] | String>;
  iso_alpha_2_lt?: Maybe<String>;
  iso_alpha_2_lte?: Maybe<String>;
  iso_alpha_2_gt?: Maybe<String>;
  iso_alpha_2_gte?: Maybe<String>;
  iso_alpha_2_contains?: Maybe<String>;
  iso_alpha_2_not_contains?: Maybe<String>;
  iso_alpha_2_starts_with?: Maybe<String>;
  iso_alpha_2_not_starts_with?: Maybe<String>;
  iso_alpha_2_ends_with?: Maybe<String>;
  iso_alpha_2_not_ends_with?: Maybe<String>;
  iso_alpha_3?: Maybe<String>;
  iso_alpha_3_not?: Maybe<String>;
  iso_alpha_3_in?: Maybe<String[] | String>;
  iso_alpha_3_not_in?: Maybe<String[] | String>;
  iso_alpha_3_lt?: Maybe<String>;
  iso_alpha_3_lte?: Maybe<String>;
  iso_alpha_3_gt?: Maybe<String>;
  iso_alpha_3_gte?: Maybe<String>;
  iso_alpha_3_contains?: Maybe<String>;
  iso_alpha_3_not_contains?: Maybe<String>;
  iso_alpha_3_starts_with?: Maybe<String>;
  iso_alpha_3_not_starts_with?: Maybe<String>;
  iso_alpha_3_ends_with?: Maybe<String>;
  iso_alpha_3_not_ends_with?: Maybe<String>;
  name_en?: Maybe<String>;
  name_en_not?: Maybe<String>;
  name_en_in?: Maybe<String[] | String>;
  name_en_not_in?: Maybe<String[] | String>;
  name_en_lt?: Maybe<String>;
  name_en_lte?: Maybe<String>;
  name_en_gt?: Maybe<String>;
  name_en_gte?: Maybe<String>;
  name_en_contains?: Maybe<String>;
  name_en_not_contains?: Maybe<String>;
  name_en_starts_with?: Maybe<String>;
  name_en_not_starts_with?: Maybe<String>;
  name_en_ends_with?: Maybe<String>;
  name_en_not_ends_with?: Maybe<String>;
  name_kr?: Maybe<String>;
  name_kr_not?: Maybe<String>;
  name_kr_in?: Maybe<String[] | String>;
  name_kr_not_in?: Maybe<String[] | String>;
  name_kr_lt?: Maybe<String>;
  name_kr_lte?: Maybe<String>;
  name_kr_gt?: Maybe<String>;
  name_kr_gte?: Maybe<String>;
  name_kr_contains?: Maybe<String>;
  name_kr_not_contains?: Maybe<String>;
  name_kr_starts_with?: Maybe<String>;
  name_kr_not_starts_with?: Maybe<String>;
  name_kr_ends_with?: Maybe<String>;
  name_kr_not_ends_with?: Maybe<String>;
  dial_number?: Maybe<String>;
  dial_number_not?: Maybe<String>;
  dial_number_in?: Maybe<String[] | String>;
  dial_number_not_in?: Maybe<String[] | String>;
  dial_number_lt?: Maybe<String>;
  dial_number_lte?: Maybe<String>;
  dial_number_gt?: Maybe<String>;
  dial_number_gte?: Maybe<String>;
  dial_number_contains?: Maybe<String>;
  dial_number_not_contains?: Maybe<String>;
  dial_number_starts_with?: Maybe<String>;
  dial_number_not_starts_with?: Maybe<String>;
  dial_number_ends_with?: Maybe<String>;
  dial_number_not_ends_with?: Maybe<String>;
  AND?: Maybe<CountryWhereInput[] | CountryWhereInput>;
  OR?: Maybe<CountryWhereInput[] | CountryWhereInput>;
  NOT?: Maybe<CountryWhereInput[] | CountryWhereInput>;
}

export interface HoleSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<HoleWhereInput>;
  AND?: Maybe<HoleSubscriptionWhereInput[] | HoleSubscriptionWhereInput>;
  OR?: Maybe<HoleSubscriptionWhereInput[] | HoleSubscriptionWhereInput>;
  NOT?: Maybe<HoleSubscriptionWhereInput[] | HoleSubscriptionWhereInput>;
}

export interface CourseUpdateWithoutClubDataInput {
  seq_no?: Maybe<Int>;
  name?: Maybe<String>;
}

export interface UserUpdateInput {
  email?: Maybe<String>;
  name?: Maybe<String>;
  password?: Maybe<String>;
}

export interface CourseUpsertWithWhereUniqueWithoutClubInput {
  where: CourseWhereUniqueInput;
  update: CourseUpdateWithoutClubDataInput;
  create: CourseCreateWithoutClubInput;
}

export interface GeodataWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  course?: Maybe<CourseWhereInput>;
  lat?: Maybe<String>;
  lat_not?: Maybe<String>;
  lat_in?: Maybe<String[] | String>;
  lat_not_in?: Maybe<String[] | String>;
  lat_lt?: Maybe<String>;
  lat_lte?: Maybe<String>;
  lat_gt?: Maybe<String>;
  lat_gte?: Maybe<String>;
  lat_contains?: Maybe<String>;
  lat_not_contains?: Maybe<String>;
  lat_starts_with?: Maybe<String>;
  lat_not_starts_with?: Maybe<String>;
  lat_ends_with?: Maybe<String>;
  lat_not_ends_with?: Maybe<String>;
  lng?: Maybe<String>;
  lng_not?: Maybe<String>;
  lng_in?: Maybe<String[] | String>;
  lng_not_in?: Maybe<String[] | String>;
  lng_lt?: Maybe<String>;
  lng_lte?: Maybe<String>;
  lng_gt?: Maybe<String>;
  lng_gte?: Maybe<String>;
  lng_contains?: Maybe<String>;
  lng_not_contains?: Maybe<String>;
  lng_starts_with?: Maybe<String>;
  lng_not_starts_with?: Maybe<String>;
  lng_ends_with?: Maybe<String>;
  lng_not_ends_with?: Maybe<String>;
  alt?: Maybe<String>;
  alt_not?: Maybe<String>;
  alt_in?: Maybe<String[] | String>;
  alt_not_in?: Maybe<String[] | String>;
  alt_lt?: Maybe<String>;
  alt_lte?: Maybe<String>;
  alt_gt?: Maybe<String>;
  alt_gte?: Maybe<String>;
  alt_contains?: Maybe<String>;
  alt_not_contains?: Maybe<String>;
  alt_starts_with?: Maybe<String>;
  alt_not_starts_with?: Maybe<String>;
  alt_ends_with?: Maybe<String>;
  alt_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<GeodataWhereInput[] | GeodataWhereInput>;
  OR?: Maybe<GeodataWhereInput[] | GeodataWhereInput>;
  NOT?: Maybe<GeodataWhereInput[] | GeodataWhereInput>;
}

export interface ClubUpdateManyMutationInput {
  id_number?: Maybe<Int>;
  name?: Maybe<String>;
  name_origin?: Maybe<String>;
  sw_lat?: Maybe<String>;
  sw_lng?: Maybe<String>;
  ne_lat?: Maybe<String>;
  ne_lng?: Maybe<String>;
  address1?: Maybe<String>;
  address2?: Maybe<String>;
}

export interface CourseUpdateManyDataInput {
  seq_no?: Maybe<Int>;
  name?: Maybe<String>;
}

export interface CourseUpdateManyWithWhereNestedInput {
  where: CourseScalarWhereInput;
  data: CourseUpdateManyDataInput;
}

export interface CourseScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  seq_no?: Maybe<Int>;
  seq_no_not?: Maybe<Int>;
  seq_no_in?: Maybe<Int[] | Int>;
  seq_no_not_in?: Maybe<Int[] | Int>;
  seq_no_lt?: Maybe<Int>;
  seq_no_lte?: Maybe<Int>;
  seq_no_gt?: Maybe<Int>;
  seq_no_gte?: Maybe<Int>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<CourseScalarWhereInput[] | CourseScalarWhereInput>;
  OR?: Maybe<CourseScalarWhereInput[] | CourseScalarWhereInput>;
  NOT?: Maybe<CourseScalarWhereInput[] | CourseScalarWhereInput>;
}

export interface GeodataUpdateInput {
  course?: Maybe<CourseUpdateOneInput>;
  lat?: Maybe<String>;
  lng?: Maybe<String>;
  alt?: Maybe<String>;
}

export interface HoleUpdateInput {
  seq_no?: Maybe<Int>;
  course?: Maybe<CourseUpdateOneInput>;
}

export interface ClubSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ClubWhereInput>;
  AND?: Maybe<ClubSubscriptionWhereInput[] | ClubSubscriptionWhereInput>;
  OR?: Maybe<ClubSubscriptionWhereInput[] | ClubSubscriptionWhereInput>;
  NOT?: Maybe<ClubSubscriptionWhereInput[] | ClubSubscriptionWhereInput>;
}

export interface GeodataCreateInput {
  id?: Maybe<ID_Input>;
  course?: Maybe<CourseCreateOneInput>;
  lat?: Maybe<String>;
  lng?: Maybe<String>;
  alt?: Maybe<String>;
}

export interface NodeNode {
  id: ID_Output;
}

export interface UserPreviousValues {
  id: ID_Output;
  email?: String;
  name: String;
  password: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  name: () => Promise<String>;
  password: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  email: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface CourseEdge {
  node: Course;
  cursor: String;
}

export interface CourseEdgePromise extends Promise<CourseEdge>, Fragmentable {
  node: <T = CoursePromise>() => T;
  cursor: () => Promise<String>;
}

export interface CourseEdgeSubscription
  extends Promise<AsyncIterator<CourseEdge>>,
    Fragmentable {
  node: <T = CourseSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface ClubConnection {
  pageInfo: PageInfo;
  edges: ClubEdge[];
}

export interface ClubConnectionPromise
  extends Promise<ClubConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ClubEdge>>() => T;
  aggregate: <T = AggregateClubPromise>() => T;
}

export interface ClubConnectionSubscription
  extends Promise<AsyncIterator<ClubConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ClubEdgeSubscription>>>() => T;
  aggregate: <T = AggregateClubSubscription>() => T;
}

export interface CourseConnection {
  pageInfo: PageInfo;
  edges: CourseEdge[];
}

export interface CourseConnectionPromise
  extends Promise<CourseConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<CourseEdge>>() => T;
  aggregate: <T = AggregateCoursePromise>() => T;
}

export interface CourseConnectionSubscription
  extends Promise<AsyncIterator<CourseConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<CourseEdgeSubscription>>>() => T;
  aggregate: <T = AggregateCourseSubscription>() => T;
}

export interface AggregateCountry {
  count: Int;
}

export interface AggregateCountryPromise
  extends Promise<AggregateCountry>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateCountrySubscription
  extends Promise<AsyncIterator<AggregateCountry>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface CountryEdge {
  node: Country;
  cursor: String;
}

export interface CountryEdgePromise extends Promise<CountryEdge>, Fragmentable {
  node: <T = CountryPromise>() => T;
  cursor: () => Promise<String>;
}

export interface CountryEdgeSubscription
  extends Promise<AsyncIterator<CountryEdge>>,
    Fragmentable {
  node: <T = CountrySubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface CountryConnection {
  pageInfo: PageInfo;
  edges: CountryEdge[];
}

export interface CountryConnectionPromise
  extends Promise<CountryConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<CountryEdge>>() => T;
  aggregate: <T = AggregateCountryPromise>() => T;
}

export interface CountryConnectionSubscription
  extends Promise<AsyncIterator<CountryConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<CountryEdgeSubscription>>>() => T;
  aggregate: <T = AggregateCountrySubscription>() => T;
}

export interface User {
  id: ID_Output;
  email?: String;
  name: String;
  password: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  name: () => Promise<String>;
  password: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  email: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface UserNullablePromise
  extends Promise<User | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  name: () => Promise<String>;
  password: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface AggregateClub {
  count: Int;
}

export interface AggregateClubPromise
  extends Promise<AggregateClub>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateClubSubscription
  extends Promise<AsyncIterator<AggregateClub>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface HoleEdge {
  node: Hole;
  cursor: String;
}

export interface HoleEdgePromise extends Promise<HoleEdge>, Fragmentable {
  node: <T = HolePromise>() => T;
  cursor: () => Promise<String>;
}

export interface HoleEdgeSubscription
  extends Promise<AsyncIterator<HoleEdge>>,
    Fragmentable {
  node: <T = HoleSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface HolePreviousValues {
  id: ID_Output;
  seq_no?: Int;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface HolePreviousValuesPromise
  extends Promise<HolePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  seq_no: () => Promise<Int>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface HolePreviousValuesSubscription
  extends Promise<AsyncIterator<HolePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  seq_no: () => Promise<AsyncIterator<Int>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface Course {
  id: ID_Output;
  seq_no?: Int;
  name: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface CoursePromise extends Promise<Course>, Fragmentable {
  id: () => Promise<ID_Output>;
  club: <T = ClubPromise>() => T;
  seq_no: () => Promise<Int>;
  name: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface CourseSubscription
  extends Promise<AsyncIterator<Course>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  club: <T = ClubSubscription>() => T;
  seq_no: () => Promise<AsyncIterator<Int>>;
  name: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface CourseNullablePromise
  extends Promise<Course | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  club: <T = ClubPromise>() => T;
  seq_no: () => Promise<Int>;
  name: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface ClubSubscriptionPayload {
  mutation: MutationType;
  node: Club;
  updatedFields: String[];
  previousValues: ClubPreviousValues;
}

export interface ClubSubscriptionPayloadPromise
  extends Promise<ClubSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ClubPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ClubPreviousValuesPromise>() => T;
}

export interface ClubSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ClubSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ClubSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ClubPreviousValuesSubscription>() => T;
}

export interface AggregateGeodata {
  count: Int;
}

export interface AggregateGeodataPromise
  extends Promise<AggregateGeodata>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateGeodataSubscription
  extends Promise<AsyncIterator<AggregateGeodata>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ClubPreviousValues {
  id: ID_Output;
  id_number?: Int;
  name?: String;
  name_origin?: String;
  sw_lat?: String;
  sw_lng?: String;
  ne_lat?: String;
  ne_lng?: String;
  address1?: String;
  address2?: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface ClubPreviousValuesPromise
  extends Promise<ClubPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  id_number: () => Promise<Int>;
  name: () => Promise<String>;
  name_origin: () => Promise<String>;
  sw_lat: () => Promise<String>;
  sw_lng: () => Promise<String>;
  ne_lat: () => Promise<String>;
  ne_lng: () => Promise<String>;
  address1: () => Promise<String>;
  address2: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface ClubPreviousValuesSubscription
  extends Promise<AsyncIterator<ClubPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  id_number: () => Promise<AsyncIterator<Int>>;
  name: () => Promise<AsyncIterator<String>>;
  name_origin: () => Promise<AsyncIterator<String>>;
  sw_lat: () => Promise<AsyncIterator<String>>;
  sw_lng: () => Promise<AsyncIterator<String>>;
  ne_lat: () => Promise<AsyncIterator<String>>;
  ne_lng: () => Promise<AsyncIterator<String>>;
  address1: () => Promise<AsyncIterator<String>>;
  address2: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface GeodataConnection {
  pageInfo: PageInfo;
  edges: GeodataEdge[];
}

export interface GeodataConnectionPromise
  extends Promise<GeodataConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<GeodataEdge>>() => T;
  aggregate: <T = AggregateGeodataPromise>() => T;
}

export interface GeodataConnectionSubscription
  extends Promise<AsyncIterator<GeodataConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<GeodataEdgeSubscription>>>() => T;
  aggregate: <T = AggregateGeodataSubscription>() => T;
}

export interface ClubEdge {
  node: Club;
  cursor: String;
}

export interface ClubEdgePromise extends Promise<ClubEdge>, Fragmentable {
  node: <T = ClubPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ClubEdgeSubscription
  extends Promise<AsyncIterator<ClubEdge>>,
    Fragmentable {
  node: <T = ClubSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface Geodata {
  id: ID_Output;
  lat?: String;
  lng?: String;
  alt?: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface GeodataPromise extends Promise<Geodata>, Fragmentable {
  id: () => Promise<ID_Output>;
  course: <T = CoursePromise>() => T;
  lat: () => Promise<String>;
  lng: () => Promise<String>;
  alt: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface GeodataSubscription
  extends Promise<AsyncIterator<Geodata>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  course: <T = CourseSubscription>() => T;
  lat: () => Promise<AsyncIterator<String>>;
  lng: () => Promise<AsyncIterator<String>>;
  alt: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface GeodataNullablePromise
  extends Promise<Geodata | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  course: <T = CoursePromise>() => T;
  lat: () => Promise<String>;
  lng: () => Promise<String>;
  alt: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface CountrySubscriptionPayload {
  mutation: MutationType;
  node: Country;
  updatedFields: String[];
  previousValues: CountryPreviousValues;
}

export interface CountrySubscriptionPayloadPromise
  extends Promise<CountrySubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = CountryPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = CountryPreviousValuesPromise>() => T;
}

export interface CountrySubscriptionPayloadSubscription
  extends Promise<AsyncIterator<CountrySubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = CountrySubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = CountryPreviousValuesSubscription>() => T;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface CountryPreviousValues {
  id: ID_Output;
  id_number?: Int;
  iso_numeric?: Int;
  iso_alpha_2?: String;
  iso_alpha_3?: String;
  name_en: String;
  name_kr?: String;
  dial_number?: String;
}

export interface CountryPreviousValuesPromise
  extends Promise<CountryPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  id_number: () => Promise<Int>;
  iso_numeric: () => Promise<Int>;
  iso_alpha_2: () => Promise<String>;
  iso_alpha_3: () => Promise<String>;
  name_en: () => Promise<String>;
  name_kr: () => Promise<String>;
  dial_number: () => Promise<String>;
}

export interface CountryPreviousValuesSubscription
  extends Promise<AsyncIterator<CountryPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  id_number: () => Promise<AsyncIterator<Int>>;
  iso_numeric: () => Promise<AsyncIterator<Int>>;
  iso_alpha_2: () => Promise<AsyncIterator<String>>;
  iso_alpha_3: () => Promise<AsyncIterator<String>>;
  name_en: () => Promise<AsyncIterator<String>>;
  name_kr: () => Promise<AsyncIterator<String>>;
  dial_number: () => Promise<AsyncIterator<String>>;
}

export interface Club {
  id: ID_Output;
  id_number?: Int;
  name?: String;
  name_origin?: String;
  sw_lat?: String;
  sw_lng?: String;
  ne_lat?: String;
  ne_lng?: String;
  address1?: String;
  address2?: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface ClubPromise extends Promise<Club>, Fragmentable {
  id: () => Promise<ID_Output>;
  id_number: () => Promise<Int>;
  name: () => Promise<String>;
  name_origin: () => Promise<String>;
  sw_lat: () => Promise<String>;
  sw_lng: () => Promise<String>;
  ne_lat: () => Promise<String>;
  ne_lng: () => Promise<String>;
  address1: () => Promise<String>;
  address2: () => Promise<String>;
  contry: <T = CountryPromise>() => T;
  course: <T = FragmentableArray<Course>>(args?: {
    where?: CourseWhereInput;
    orderBy?: CourseOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface ClubSubscription
  extends Promise<AsyncIterator<Club>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  id_number: () => Promise<AsyncIterator<Int>>;
  name: () => Promise<AsyncIterator<String>>;
  name_origin: () => Promise<AsyncIterator<String>>;
  sw_lat: () => Promise<AsyncIterator<String>>;
  sw_lng: () => Promise<AsyncIterator<String>>;
  ne_lat: () => Promise<AsyncIterator<String>>;
  ne_lng: () => Promise<AsyncIterator<String>>;
  address1: () => Promise<AsyncIterator<String>>;
  address2: () => Promise<AsyncIterator<String>>;
  contry: <T = CountrySubscription>() => T;
  course: <T = Promise<AsyncIterator<CourseSubscription>>>(args?: {
    where?: CourseWhereInput;
    orderBy?: CourseOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface ClubNullablePromise
  extends Promise<Club | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  id_number: () => Promise<Int>;
  name: () => Promise<String>;
  name_origin: () => Promise<String>;
  sw_lat: () => Promise<String>;
  sw_lng: () => Promise<String>;
  ne_lat: () => Promise<String>;
  ne_lng: () => Promise<String>;
  address1: () => Promise<String>;
  address2: () => Promise<String>;
  contry: <T = CountryPromise>() => T;
  course: <T = FragmentableArray<Course>>(args?: {
    where?: CourseWhereInput;
    orderBy?: CourseOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface HoleSubscriptionPayload {
  mutation: MutationType;
  node: Hole;
  updatedFields: String[];
  previousValues: HolePreviousValues;
}

export interface HoleSubscriptionPayloadPromise
  extends Promise<HoleSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = HolePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = HolePreviousValuesPromise>() => T;
}

export interface HoleSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<HoleSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = HoleSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = HolePreviousValuesSubscription>() => T;
}

export interface HoleConnection {
  pageInfo: PageInfo;
  edges: HoleEdge[];
}

export interface HoleConnectionPromise
  extends Promise<HoleConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<HoleEdge>>() => T;
  aggregate: <T = AggregateHolePromise>() => T;
}

export interface HoleConnectionSubscription
  extends Promise<AsyncIterator<HoleConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<HoleEdgeSubscription>>>() => T;
  aggregate: <T = AggregateHoleSubscription>() => T;
}

export interface CourseSubscriptionPayload {
  mutation: MutationType;
  node: Course;
  updatedFields: String[];
  previousValues: CoursePreviousValues;
}

export interface CourseSubscriptionPayloadPromise
  extends Promise<CourseSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = CoursePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = CoursePreviousValuesPromise>() => T;
}

export interface CourseSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<CourseSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = CourseSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = CoursePreviousValuesSubscription>() => T;
}

export interface GeodataEdge {
  node: Geodata;
  cursor: String;
}

export interface GeodataEdgePromise extends Promise<GeodataEdge>, Fragmentable {
  node: <T = GeodataPromise>() => T;
  cursor: () => Promise<String>;
}

export interface GeodataEdgeSubscription
  extends Promise<AsyncIterator<GeodataEdge>>,
    Fragmentable {
  node: <T = GeodataSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateCourse {
  count: Int;
}

export interface AggregateCoursePromise
  extends Promise<AggregateCourse>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateCourseSubscription
  extends Promise<AsyncIterator<AggregateCourse>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface GeodataPreviousValues {
  id: ID_Output;
  lat?: String;
  lng?: String;
  alt?: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface GeodataPreviousValuesPromise
  extends Promise<GeodataPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  lat: () => Promise<String>;
  lng: () => Promise<String>;
  alt: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface GeodataPreviousValuesSubscription
  extends Promise<AsyncIterator<GeodataPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  lat: () => Promise<AsyncIterator<String>>;
  lng: () => Promise<AsyncIterator<String>>;
  alt: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface GeodataSubscriptionPayload {
  mutation: MutationType;
  node: Geodata;
  updatedFields: String[];
  previousValues: GeodataPreviousValues;
}

export interface GeodataSubscriptionPayloadPromise
  extends Promise<GeodataSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = GeodataPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = GeodataPreviousValuesPromise>() => T;
}

export interface GeodataSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<GeodataSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = GeodataSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = GeodataPreviousValuesSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface CoursePreviousValues {
  id: ID_Output;
  seq_no?: Int;
  name: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface CoursePreviousValuesPromise
  extends Promise<CoursePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  seq_no: () => Promise<Int>;
  name: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface CoursePreviousValuesSubscription
  extends Promise<AsyncIterator<CoursePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  seq_no: () => Promise<AsyncIterator<Int>>;
  name: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface Country {
  id: ID_Output;
  id_number?: Int;
  iso_numeric?: Int;
  iso_alpha_2?: String;
  iso_alpha_3?: String;
  name_en: String;
  name_kr?: String;
  dial_number?: String;
}

export interface CountryPromise extends Promise<Country>, Fragmentable {
  id: () => Promise<ID_Output>;
  id_number: () => Promise<Int>;
  iso_numeric: () => Promise<Int>;
  iso_alpha_2: () => Promise<String>;
  iso_alpha_3: () => Promise<String>;
  name_en: () => Promise<String>;
  name_kr: () => Promise<String>;
  dial_number: () => Promise<String>;
}

export interface CountrySubscription
  extends Promise<AsyncIterator<Country>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  id_number: () => Promise<AsyncIterator<Int>>;
  iso_numeric: () => Promise<AsyncIterator<Int>>;
  iso_alpha_2: () => Promise<AsyncIterator<String>>;
  iso_alpha_3: () => Promise<AsyncIterator<String>>;
  name_en: () => Promise<AsyncIterator<String>>;
  name_kr: () => Promise<AsyncIterator<String>>;
  dial_number: () => Promise<AsyncIterator<String>>;
}

export interface CountryNullablePromise
  extends Promise<Country | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  id_number: () => Promise<Int>;
  iso_numeric: () => Promise<Int>;
  iso_alpha_2: () => Promise<String>;
  iso_alpha_3: () => Promise<String>;
  name_en: () => Promise<String>;
  name_kr: () => Promise<String>;
  dial_number: () => Promise<String>;
}

export interface Hole {
  id: ID_Output;
  seq_no?: Int;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface HolePromise extends Promise<Hole>, Fragmentable {
  id: () => Promise<ID_Output>;
  seq_no: () => Promise<Int>;
  course: <T = CoursePromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface HoleSubscription
  extends Promise<AsyncIterator<Hole>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  seq_no: () => Promise<AsyncIterator<Int>>;
  course: <T = CourseSubscription>() => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface HoleNullablePromise
  extends Promise<Hole | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  seq_no: () => Promise<Int>;
  course: <T = CoursePromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface AggregateHole {
  count: Int;
}

export interface AggregateHolePromise
  extends Promise<AggregateHole>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateHoleSubscription
  extends Promise<AsyncIterator<AggregateHole>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

export type Long = string;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "User",
    embedded: false
  },
  {
    name: "Country",
    embedded: false
  },
  {
    name: "Club",
    embedded: false
  },
  {
    name: "Course",
    embedded: false
  },
  {
    name: "Hole",
    embedded: false
  },
  {
    name: "Geodata",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
